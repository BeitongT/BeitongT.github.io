<!DOCTYPE html>
<!-- saved from url=(0077)https://courses.cit.cornell.edu/ece5990/ECE5725_Fall2017_projects/bt346-qq39/ -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <meta name="description" content="">
    <meta name="author" content="">
    <title>The Infinity Mirror Music Player</title>
    <link rel="icon" type="image/png" href="images/favicon.png" />
    

    <!-- Bootstrap core CSS -->
    <link href="./1The Infinity Mirror Music Player_files/bootstrap.min.css" rel="stylesheet">
    <!-- IE10 viewport hack for Surface/desktop Windows 8 bug -->
    <!-- <link href="../../assets/css/ie10-viewport-bug-workaround.css" rel="stylesheet"> -->
    <!-- Custom styles for this template -->
    <link href="./1The Infinity Mirror Music Player_files/starter-template.css" rel="stylesheet">
    <!-- Just for debugging purposes. Don't actually copy these 2 lines! -->
    <!--[if lt IE 9]><script src="../../assets/js/ie8-responsive-file-warning.js"></script><![endif]-->
    <!-- <script src="../../assets/js/ie-emulation-modes-warning.js"></script> -->
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
</head>

<body>
    <nav class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="1The Infinity Mirror Music Player.htm">Infinite Propeller Displayer</a>
            </div>
            <div id="navbar" class="collapse navbar-collapse">
                <ul class="nav navbar-nav">
                    <li class="active"><a href="1The Infinity Mirror Music Player.htm">Home</a></li>
                    <li><a href="1The Infinity Mirror Music Player.htm#intro">Introduction</a></li>
                    <li><a href="1The Infinity Mirror Music Player.htm#obj">Project Objective</a></li>
                    <li><a href="1The Infinity Mirror Music Player.htm#design">Design</a></li>
                    <li><a href="1The Infinity Mirror Music Player.htm#testing">Testing</a></li>
                    <li><a href="1The Infinity Mirror Music Player.htm#result">Result</a></li>
                </ul>
            </div>
            <!--/.nav-collapse -->
        </div>
    </nav>
    <div class="container">
        <div class="starter-template">
            <h1 class = "header1">Infinite Propeller Displayer</h1>
            <p class = "notification" style="color: red">It will be displayed in Cornell Career Fair Showcase!!</p>
            <p class = "notification" style="color: red">It will also be displayed in Cornell ECE showcase!!</p>
        </div>
        <hr>
        <!-- <div class="center-block"> -->
          <center><iframe width="840" height="473" src="https://www.youtube.com/embed/O2lo0cTOUA8" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></center>
          <h4 style="text-align:center;">Demonstration Video(Because the difference update rate between the camera and the displayer, we can see there are some shadow in the video. Actually the effect is really good!)</h4>
        <!-- </div> -->
        <hr id="intro">
        <div style="text-align:center;">
            <h2>Introduction</h2>
            <p class="content">
                This is a propeller displayer with infinite mirror effect. I believe this is the first one in the world! It can display texts, time and music spectrum with different colors. This project is embedded with an arduino, a raspberry Pi and a bluetooth Uart module. This is my ECE 5725 Design with Embedded System final project.
            </p>
        </div>
        <hr id="obj">
        <div class="row">
            <div style="text-align:center;">
                <h2>Project Objective</h2>
            </div>
            <p class="content">
                This is project is to show a new idea to display something. I designed this prototype because I am crazy about the infinite mirror trick and music visualization. And recently, I saw some cool propeller displayer project on the Youtube. So, I decide to make this project for my class Final Project. It is a prototype and a verification of my idea. After building this project, I found the effect of it is really good! So, maybe this project can give other people who love these elements a reference. And we can build something more fancy!
            </p>
        </div>
        <hr id="design">
        <div style="text-align:center;">
            <h2>Design</h2>
            <p class="content">The whole system can be divided into three main subsystems: <b>the Propeller Displayer, the Infinity Mirror, the Raspberry Pi3 Control Module</b>.</p>
            <div style="text-align:center;">
                <img class="img-rounded" src="./1The Infinity Mirror Music Player_files/whole_system_design.jpg" alt="whole_system_design image" style="width:60%;">
                <img class="img-rounded" src="./1The Infinity Mirror Music Player_files/board.png" alt="whole_system_design image" style="width:30%;">
                <p><i>Figure 1: the hardware design</i></p>
            </div>
            <h3>Hardware Design</h3>
            <br>
            <h4 style="text-align:left;"><b>The Propeller Displayer</b></h4>
            <p class="content">
                The propeller clock module, the primary display screen of the system, is consisted of the following main hardware components:</p>
            <p class="content">
                1. A <b>12V motor</b>, which is attached under the base board and fixed by a motor holder to the base board, is utilized to rotate the proto board.</p> 
            <p class="content">
                2. Here the <b>proto board</b> is a PCB board that is used to hold the other major components, including the Adafruit Dotstar LED strip, the Arduino Pro mini, the Hall sensor, and the Bluetooth to UART module.As for these components on the protoboard, a Dotstar LED strip with 8 LEDs will be used to display the content while rotating.</p> 
            <p class="content">
                3. <b>Arduino pro mini</b> will be used to control the LED strip display and communicate with the Raspberry Pi3 to control the whole system. </p> 
            <p class="content">
                4. A <b>wireless Bluetooth to UART converter</b> will be used to transmit the control signal from Raspberry Pi 3 to Arduino. </p> 
            <p class="content">
                5. A <b>hall sensor</b>, which is fixed on the board, together with a magnet, which is fixed on the regular mirror surface, is used to detect the starting point and refresh the display screen. </p> 
            <p class="content">
                6. A <b>DC motor control module</b> is planned to be connected with the board and control the rotating speed of the board( which was removed in the end as it introduced unstability to the motor rotating speed). In this module, balancing of the propeller clock will be our major challenge.</p> 
            <p class="content">
                7. The primary power supply of the propeller displayer module is achieved with the help of a 12V 600mA <b>wireless charging module</b>. Three main power supply techniques were tried out thoroughly (explained in the next part), we choose the inductive charging system due to its lightweight and space-saving features.
            </p>
            <div style="text-align:center;">
                <img class="img-rounded" src="./1The Infinity Mirror Music Player_files/protoboard.jpeg" alt="propeller displayer image" style="width:80%;">
                <p><i>Figure 2: the protoboard</i></p>
            </div>
            <br>
            <h4 style="text-align:left;"><b>The Infinity Mirror</b></h4>
            <p class="content">
                The infinity mirror adds a bonus mesmerizing visual effect for the whoe system. This module contains a special one-way mirror, a regular mirror, and a baseboard. All mirrors will be laser cut to be round-shaped. The special top mirror (the one-way mirror) is 50% reflective and 50% transmissive; the mirror in the middle (under the rotating board and on top of the 12V motor of the propeller clock) is a normal mirror that reflects the light. The normal mirror is used to reflect the LED screen display and will be installed in between the rotating board and the 12V motor. The displayed message will bounce back and forth between the two mirrors. With some lights escaping from the top mirror, the reflected displaying will become less and less each time. In this way, the gradually dimming illusion can be observed as hundreds of depths.
            </p>
            <div style="text-align:center;">
                <img class="img-rounded" src="./1The Infinity Mirror Music Player_files/infinity.png" alt="infinity image" style="width:40%;">
                <p><i>Figure 3: the infinity mirror</i></p>
            </div>
            <br>
            <h4 style="text-align:left;"><b>The Raspberry Pi 3 Control Module</b></h4>
            <p class="content">
                In order to control the display messages of the propeller displayer and achieve the automation of the whole system, Raspberry pi 3 is used to communicate with the propeller clock module.Raspberry Pi sends the commands to Arduino and the Arduino will control the LED strip to display the different patterns.
            </p>
            <p class="content">
                I used the socket library to transmit the messages between Raspberry Pi and Arduino. I designed a simple communication protocol between these two device which includes sending message, receiving message, cleaning the buffer and response to make sure the communication is robust.
            </p>
            <p class="content">
                For <b>text display</b>. The Arduino stored the char library. And it stores some defaults string. Arduino displays the texts according to the commands from Raspberry Pi.</p>
            <p class="content">
                For <b>time display</b>. The Raspberry will get the current time and send it to the Arduino. The Arduino will display the time. And raspberry pi will send the update signal to the Arduino to update the time.</p>
            <p class="content">
                For <b>music spectrum display</b>. Raspberry Pi will decode the music and generate the music spectrum. For each frame, raspberry Pi will send 8 number which means the magnitude of 8 different frequency range. Arduino receives the signal and update each frame. Because the baud rate restriction, we can only display some simple patterns. I will work on other communication 
            </p>
            <br>
            <h3>Software Design</h3>
            <br>
            <div style="text-align:center;">
                <img class="img-rounded" src="./1The Infinity Mirror Music Player_files/flow_chart.jpg" alt="flow_chart image" style="width:100%;">
                <p><i>Figure 4: software design flow chart</i></p>
            </div>

            <br>
            <h4 style="text-align:left;"><b>Other hardware modules on the propeller displayer</b></h4>
            <ul class="content">
                <li>For the 12V rotating motor, we will solder the motor with proper wire first, then connect the motor with NRF520 MOS to control the rotating speed. </li>
                <li> For the motor holder, we plan to use Fusion 360 to design it and use 3D printing to print it from Cornell RPL lab.</li>
                <li> For the hall sensor, we will modify the structure of the hall sensor to be more friendly to be soldered on the prototype board. We will test the reading distance of the hall sensor (Expected to be about 1 cm).</li>
                <li> For the Dotstar LED strip, we plan to test and light the led strip using the strandtest program on Adafruit Dotstar website.</li>
                <li> For the rotating board, we will cut the Adafruit full size prototype board to fit the motor and let the LED light pass the creavice of the board to be reflected. All other components will be soldered on the board.</li>
            </ul>

        </div>
        <hr id="testing">
        <div style="text-align:center;">
            <h2>Testing &amp Redesign</h2>
            <h4 style="text-align:left;"><b>Performance testing and Re-design</b></h4>
            <p class="content">
                The test and redesign steps for the major components of the system were conducted as follows:
            </p>
            <br>
            <h4 style="text-align:left;"><b>Propeller clock displayer balancing</b></h4>
            <p class="content">
                The propeller displayer was the main display screen for the whole system. It utilizes persistence of vision theory to display the illusion of stable patterns floating in the air, thus it requires demanding rotation balance skills, which does not fall within our familiar expertise.
            </p>
            <p class="content">
                The protoboard system was even not balanced when we set up the initial system and began the rotation test. We first changed the Li-ion battery position as initially we put the battery on one side of the rotating board. As the battery is definitely the heaviest part on the board, we put it to the center hoping to improve. But as the battery module itself was not symmetric, we still cannot balance the system. We searched several solutions on Internet, and removed our power supply system for the propeller clock off-board (explained in power redesign module), then the board itself can be balanced.
            </p>
            <p class="content">
                Then the led strip was added, the rotating clock could not maintain balance again. One possible reason may be that the LED strip is too soft to keep in position when the motor was rotating at a high speed(around 1800 rpm). As for this factor, we thought of using structure wood to support the led strip. Another possible reason for the unbalance introduced by the led strip is that the LED strip was mounted only on one side, we need to add one similar structure to the other side to balance during rotating. In the end, we found a more stiff material to hold the LED strip and use four wires to hold the whole system, structured like a bridge. We also added some coins to balance the weight and adjust carefully the distance. Finally, the whole system was successfully balanced with all components.
            </p>
            <br>
            <h4 style="text-align:left;"><b> Charging system re-design</b></h4>
            <p class="content">
                <b>The redesign of the charging system has gone through a Li-ion battery to a slip ring, then to inductive wireless charging module.</b> At first, a rechargeable Li-ion battery will be used to charge the propeller clock module. Following our initial charging system design, we successfully recharge the Li-ion battery using the lab power supply equipment, and modified the Li-ion battery boost module, added a switch to control the power and added a charging circuit, in the end, we successfully have 5V output. But as the cumbersomeness of the battery made balancing rotating board so difficult, we removed it and tried slip ring to power the rotary part.
            </p>
            <p class="content">
                We made a slip ring to replace the Li-ion battery with the following steps:
            </p>
            <ul class="content">
                <li>Cut copper and aluminum slice to make a metal roll.</li>
                <li>Cut the AA battery to get a perfect metal roll.</li>
                <li>Cut the copper to get a perfect electrode.</li>
                <li>Design its mechanical structure to make it more reliable.</li>
                <li>Testing its reliability on high speed. </li>
            </ul>
            <p class="content">
                The finished part picture is shown as below:
            </p>
            <div style="text-align:center;">
                <img class="img-rounded" src="./1The Infinity Mirror Music Player_files/slip_ring.png" alt="slip_ring image" style="width:30%;">
                <p><i>Figure 5: slip ring charging for propeller clock</i></p>
            </div>
            <p class="content">
                The finished slip ring worked mostly OK except the motor became hot after some time when rotating. We suspect it’s mainly because of the insulation(the tape and glue) when fixing the slip ring on the motor. Also the slip ring will increase the resistance of the rotation part, thus the rotating board will become somewhat unstable.To combat this problem, we experimented <b>inductive charging module</b> to power the propeller displayer system, and tested the set with oscilloscope and assembled it on the system. This is a lightweight and stable solution that we finally choose to use for our project.
            </p>
            <br>
            <div style="text-align:center;">
                <img class="img-rounded" src="./1The Infinity Mirror Music Player_files/inductive charger.jpeg" alt="slip_ring image" style="width:50%;">
                <p><i>Figure 6: inductive charging module</i></p>
            </div>

            <br>
            <h4 style="text-align:left;"><b>Bluetooth to uart communication module design</b></h4>
            <p class="content">
                The Bluetooth to UART communication module is an essential part of the system communication and controlling. We initially used the module <b>HC-06</b> to test the communication between the two microcontrollers, but we cannot get the desired reply from the serial to the Raspberry Pi monitor. To debug, we first checked all the hardware and made sure that the circuit is correctly connected. Then, we checked the connection between our computer Bluetooth connection and the module. The HC-06 module could connect to the computer correctly. We then did research on the internet and found similar bugs related to the HC-06 module, so we switched to <b>HC-05</b> module instead. Using HC-05 module, the testing program could be uploaded successfully. We were also able to achieve the bi-directional communication between Raspberry Pi 3 and Arduino pro mini: the command could be sent to Arduino from Raspberry Pi 3; Raspberry Pi 3 could receive and display the reply information from Arduino. Finally, <b>we redesigned the connector</b> between the Bluetooth module and the Arduino pro mini to make it more compact and easier to balance on the rotating board.
            </p>
            <br>
            <h4 style="text-align:left;"><b>Display design</b></h4>
            <p class="content">
                Initially when Raspberry Pi 3 communicated the with Arduino pro mini, the reply from the Arduino was not correct. After some research we figured out that a time lapse need to be added between sending the command and receiving the reply. Otherwise, the reply will not be prepared, then the receiving buffer would not have the full reply. That’s the reason that the reply displayed on the screen was not correct. Then, after figuring out the bugs, we see the result! <b style = "color: red">Awesome!</b>
            </p>
            <p class="content">
                At first, the character displaying effect on the propeller displayer is similar with the picture shown below(left): the shortest distance between the led light spot was separated around 4-5 centimeters. To improve the displaying effect, we reduced the delay time and finally delete the delay time between the two status(light on and off) entirely, but it didn’t work.
            </p>
            <p class="content">
                So, we suspected that the effect of the fastest updating rate may just be like this. We then searched the document of the dotstar led strip on internet and found that the updating rate could be super fast: for Arduino, the PWM rating could be 8MHZ, which is the clock rate. If that is true, we were supposed to get a better POV effect than the displayed effect. We then figured it might be the software problem. As we were using the Adafruit library previously, twe <b>tried the Fastled library</b> to see the display effect. It worked! The displaying effect with the new library is much better, shown in the picture below(middle).
            </p>
            <p class="content">
                With the new library, we could display the characters on screen better, but we want to display messages more precise and mimic the real-world display. So we tried to <b>change the software SPI to hardware SPI</b> by changing the connection within the system and got an even better display effect as shown in the picture below(right).
            </p>
            <img class="img-rounded" src="./1The Infinity Mirror Music Player_files/fix_display1.png" alt="fix_display image" style="width:20%;">
            <img class="img-rounded" src="./1The Infinity Mirror Music Player_files/fix_display2.png" alt="fix_display image" style="width:20%;">
            <img class="img-rounded" src="./1The Infinity Mirror Music Player_files/fix_display3.png" alt="fix_display image" style="width:20%;">
            <p><i>Figure 7: display optimization</i></p>
            <p class="content">
                Based on the third solution, we successfully displayed the character “ECE5725” on our system.
            </p>
        </div>
        <hr id="result">
        <div style="text-align:center;">
            <h2>Result</h2>
            <p class="content">
                The main objectives outlined in the initial project plan were achieved successfully. We have finished the propeller displaying function, the infinity mirror displaying part, the music spectrum displaying module, control function. The few bumps happened mainly when we tried to balance the whole system, trying out the charging systems, displaying music spectrums.
            </p>
            <p class="content">
                The Propeller Displayer: the rotating propeller clock requires state-of-art soldering, delicate assembly of all the components on a small board, creative balancing ideas, numerous testing, failures, and improvements along the way.
            </p>
            <p class="content">
                The Infinity Mirror: The optical effects of the infinity mirror, combined with the propeller clock display, is a unique display system originated from creativity and passion.
            </p>
            <p class="content">
                The Raspberry Pi 3 Control Module: the Raspberry Pi3 control program is versatile in that it can be expanded to include more display modes by just including the corresponding display messages and switching functions.
            </p>
            <h4 style="text-align:left;"><b>Conclusions</b></h4>
            <p class="content">
                Overall, this project allowed us to devote time exploring a cool project that we felt would be expanded to a real stunning product in real lives.
            </p>
            <h4 style="text-align:left;"><b>Future work</b></h4>
            <p class="content">
                For the future work of this project, we planed the below functions: the system can receive music signals from mobile phone, a special equipment to control the display depth of the infinity mirror can be designed, so that more display effect choices can be set. We also want to add more interactive functions to this displayer like a touch screen or voice control. All in all, in the end we want our product to achieve touch screen, voice control and displaying depth control functions. We will continue to finish all these functions after this course.
            </p>
        </div>
        <hr>
        <div class="row" style="text-align:center;">
            <h2>TEAM MEMBERS</h2>
            <div style="text-align:center;">
                <img class="img-rounded" src="./1The Infinity Mirror Music Player_files/group.jpg" alt="Generic placeholder image" style="width:50%;">
                <p><i>Group picture</i></p>
            </div>
            <p class="content">
                In terms of the contributions, BeiTong focused on the hardware hacking and software design, while Qian focused on the software testing and the beginning of display program . We tested different techniques for balancing the system together, and BeiTong built the music spectrum display program part. This brilliant idea was brought up by Beitong Tian, and he contributed a lot of his prior expertise and experience on Embedded Operating Systems.
            </p>
        </div>
        <hr>
        <div style="font-size:18px">
            <h2>Materials and Costs</h2>
            <table class="tg">
                <tbody><tr>
                    <th class="tg-yw4l">Parts</th>
                    <th class="tg-yw4l">Cost/Dollar</th>
                    <th class="tg-yw4l">Source</th>
                </tr>
                <tr>
                    <td class="tg-yw4l">Motor 12V with Copper head</td>
                    <td class="tg-yw4l">10</td>
                    <td class="tg-yw4l">Amazon</td>
                </tr>
                <tr>
                    <td class="tg-yw4l">Bluetooth to Uart Converter</td>
                    <td class="tg-yw4l">7.5</td>
                    <td class="tg-yw4l">Amazon</td>
                </tr>
                <tr>
                    <td class="tg-yw4l">Hall sensor</td>
                    <td class="tg-yw4l">5</td>
                    <td class="tg-yw4l">Amazon</td>
                </tr>
                <tr>
                    <td class="tg-yw4l">Inductive Charging Module</td>
                    <td class="tg-yw4l">10</td>
                    <td class="tg-yw4l">Amazon</td>
                </tr>
                <tr>
                    <td class="tg-yw4l">Raspberry Pi 3</td>
                    <td class="tg-yw4l">35</td>
                    <td class="tg-yw4l">Provided in lab</td>
                </tr>
                <tr>
                    <td class="tg-yw4l">Arduino pro mini</td>
                    <td class="tg-yw4l">6.5</td>
                    <td class="tg-yw4l">Provided in lab</td>
                </tr>
                <tr>
                    <td class="tg-yw4l">One-way mirror</td>
                    <td class="tg-yw4l">15</td>
                    <td class="tg-yw4l">Amazon</td>
                </tr>
                <tr>
                    <td class="tg-yw4l">Regular mirror</td>
                    <td class="tg-yw4l">9</td>
                    <td class="tg-yw4l">Amazon</td>
                </tr>
                <tr>
                    <td class="tg-yw4l">Adafruit Dotstar LED strip</td>
                    <td class="tg-yw4l">5</td>
                    <td class="tg-yw4l">Amazon</td>
                </tr>
                <tr>
                    <td class="tg-yw4l">Proto board</td>
                    <td class="tg-yw4l">0</td>
                    <td class="tg-yw4l">Provided in lab</td>
                </tr>
                <tr>
                    <td class="tg-yw4l">Motor holder</td>
                    <td class="tg-yw4l">0</td>
                    <td class="tg-yw4l">3D printed in RPL</td>
                </tr>
                <tr>
                    <td class="tg-yw4l">Infinity mirror Base</td>
                    <td class="tg-yw4l">0</td>
                    <td class="tg-yw4l">Recycled</td>
                </tr>
                <tr>
                    <td class="tg-yw4l">Total</td>
                    <td class="tg-yw4l">103</td>
                    <td class="tg-yw4l"></td>
                </tr>
            </tbody></table>
        </div>
        <hr>
        <div style="font-size:12px">
            <h2>References</h2>
            <a href="https://www.youtube.com/watch?v=eMfcs0iO8zE&amp;t=265s">Propeller clock displayer video instructions</a>
            <br>
            <a href="https://learn.adafruit.com/adafruit-dotstar-leds/overview">Adafruit LED strip library</a>
            <br>
            <a href="http://getbootstrap.com/">Bootstrap</a>
            <br>
        </div>
        <hr>
        <div class="row">
            <h2>Code Appendix</h2>
            <button type="button" class="btn btn-info" data-toggle="collapse" data-target="#ino">web_version.ino</button>
            <div id="ino" class="collapse">
                <!-- HTML generated using hilite.me -->
                <div style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">
                    <table>
                        <tbody><tr>
                            <td><pre style="margin: 0; line-height: 125%">  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482</pre></td>
                            <td><pre style="margin: 0; line-height: 125%"><span style="color: #888888">// web_version.ino</span>
<span style="color: #557799">#include &lt;FastLED.h&gt;</span>
<span style="color: #557799">#define NUM_LEDS 8</span>

CRGB leds[NUM_LEDS];  <span style="color: #888888">// FastLED library data structure</span>

<span style="color: #888888">//functions</span>
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">rpm_cal</span>();
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">printLetter</span>(<span style="color: #333399; font-weight: bold">char</span> ch);
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">display_test</span>(<span style="color: #333399; font-weight: bold">int</span> times);
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">printLetter</span>(<span style="color: #333399; font-weight: bold">char</span> ch, <span style="color: #333399; font-weight: bold">long</span> interval);
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">printLetter_new</span>(<span style="color: #333399; font-weight: bold">char</span> ch, <span style="color: #333399; font-weight: bold">int</span> interval,<span style="color: #333399; font-weight: bold">long</span> color);
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">show_frame</span>(<span style="color: #333399; font-weight: bold">int</span> content, <span style="color: #333399; font-weight: bold">int</span> total_number,<span style="color: #333399; font-weight: bold">long</span> color) ;
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">show_sigleunit</span>(<span style="color: #333399; font-weight: bold">long</span> color,byte b, <span style="color: #333399; font-weight: bold">int</span> width_color, <span style="color: #333399; font-weight: bold">int</span> width_black ) ;
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">show_singleline</span>(<span style="color: #333399; font-weight: bold">long</span> color, byte b);
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">time_converter</span>(<span style="color: #333399; font-weight: bold">int</span> hour, <span style="color: #333399; font-weight: bold">int</span> mini, <span style="color: #333399; font-weight: bold">int</span> second);
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">speed_control</span>();
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">parse_command</span>();
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">parse_print</span>();
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">led_test1</span>();
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">clean_buffer</span>();

<span style="color: #888888">//variables</span>
<span style="color: #333399; font-weight: bold">int</span> rate <span style="color: #333333">=</span><span style="color: #0000DD; font-weight: bold">4</span>;
<span style="color: #333399; font-weight: bold">int</span> circle_count <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;
<span style="color: #333399; font-weight: bold">int</span> str_len <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;
<span style="color: #333399; font-weight: bold">int</span> black_len <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;
<span style="color: #008800; font-weight: bold">volatile</span> <span style="color: #333399; font-weight: bold">int</span>  count <span style="color: #333333">=</span><span style="color: #0000DD; font-weight: bold">0</span>;
<span style="color: #333399; font-weight: bold">int</span> update_frame <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;
<span style="color: #333399; font-weight: bold">int</span> rows<span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">8</span>;      
<span style="color: #008800; font-weight: bold">const</span> <span style="color: #333399; font-weight: bold">int</span> charHeight <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">8</span>;
<span style="color: #008800; font-weight: bold">const</span> <span style="color: #333399; font-weight: bold">int</span> charWidth <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">5</span>;
<span style="color: #333399; font-weight: bold">long</span> time_his <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;
<span style="color: #333399; font-weight: bold">long</span> time_his2 <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;
byte check <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;
<span style="color: #333399; font-weight: bold">long</span> timeinterval <span style="color: #333333">=</span><span style="color: #0000DD; font-weight: bold">0</span>;
<span style="color: #333399; font-weight: bold">bool</span> error <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;
<span style="color: #333399; font-weight: bold">bool</span> music_mode <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;
<span style="color: #333399; font-weight: bold">bool</span> music_update_frame <span style="color: #333333">=</span><span style="color: #0000DD; font-weight: bold">1</span>;
<span style="color: #333399; font-weight: bold">char</span> music_his[<span style="color: #0000DD; font-weight: bold">8</span>] <span style="color: #333333">=</span> {<span style="color: #005588; font-weight: bold">0xFE</span>,<span style="color: #005588; font-weight: bold">0xFE</span>,<span style="color: #005588; font-weight: bold">0xFE</span>,<span style="color: #005588; font-weight: bold">0xFE</span>,<span style="color: #005588; font-weight: bold">0xFE</span>,<span style="color: #005588; font-weight: bold">0xFE</span>,<span style="color: #005588; font-weight: bold">0xFE</span>,<span style="color: #005588; font-weight: bold">0xFE</span>};
<span style="color: #333399; font-weight: bold">long</span> color_select <span style="color: #333333">=</span> <span style="color: #005588; font-weight: bold">0xFF0000</span>;
<span style="color: #333399; font-weight: bold">int</span> rpm <span style="color: #333333">=</span><span style="color: #0000DD; font-weight: bold">0</span>;
<span style="color: #333399; font-weight: bold">int</span> time_pins <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;
<span style="color: #333399; font-weight: bold">long</span> lastmillis <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;
<span style="color: #333399; font-weight: bold">int</span> k <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;
String btdata <span style="color: #333333">=</span> <span style="background-color: #fff0f0">"String"</span>;
<span style="color: #333399; font-weight: bold">int</span> test2pass <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;
String trash <span style="color: #333333">=</span> <span style="background-color: #fff0f0">""</span>;
<span style="color: #333399; font-weight: bold">bool</span> speedtest <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;
<span style="color: #333399; font-weight: bold">int</span> print_mode <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">1</span>;
<span style="color: #333399; font-weight: bold">int</span> music <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;
<span style="color: #333399; font-weight: bold">bool</span> time_start <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;
<span style="color: #333399; font-weight: bold">int</span> hour <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;
<span style="color: #333399; font-weight: bold">int</span> mini<span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;
<span style="color: #333399; font-weight: bold">int</span> second <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;
String H <span style="color: #333333">=</span> <span style="background-color: #fff0f0">"0"</span>;
String M <span style="color: #333333">=</span> <span style="background-color: #fff0f0">"0"</span>;
String S <span style="color: #333333">=</span> <span style="background-color: #fff0f0">"0"</span>;
<span style="color: #333399; font-weight: bold">bool</span> time_update_frame <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;






<span style="color: #008800; font-weight: bold">const</span> <span style="color: #333399; font-weight: bold">unsigned</span> <span style="color: #333399; font-weight: bold">char</span> font[<span style="color: #0000DD; font-weight: bold">95</span>][<span style="color: #0000DD; font-weight: bold">5</span>] <span style="color: #333333">=</span> {
         {<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x00</span>},   <span style="color: #888888">//   0x20 32</span>
         {<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x6f</span>,<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x00</span>},   <span style="color: #888888">// ! 0x21 33</span>
         {<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x07</span>,<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x07</span>,<span style="color: #005588; font-weight: bold">0x00</span>},   <span style="color: #888888">// " 0x22 34</span>
         {<span style="color: #005588; font-weight: bold">0x14</span>,<span style="color: #005588; font-weight: bold">0x7f</span>,<span style="color: #005588; font-weight: bold">0x14</span>,<span style="color: #005588; font-weight: bold">0x7f</span>,<span style="color: #005588; font-weight: bold">0x14</span>},   <span style="color: #888888">// # 0x23 35</span>
         {<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x07</span>,<span style="color: #005588; font-weight: bold">0x04</span>,<span style="color: #005588; font-weight: bold">0x1e</span>,<span style="color: #005588; font-weight: bold">0x00</span>},   <span style="color: #888888">// $ 0x24 36</span>
         {<span style="color: #005588; font-weight: bold">0x23</span>,<span style="color: #005588; font-weight: bold">0x13</span>,<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x64</span>,<span style="color: #005588; font-weight: bold">0x62</span>},   <span style="color: #888888">// % 0x25 37</span>
         {<span style="color: #005588; font-weight: bold">0x36</span>,<span style="color: #005588; font-weight: bold">0x49</span>,<span style="color: #005588; font-weight: bold">0x56</span>,<span style="color: #005588; font-weight: bold">0x20</span>,<span style="color: #005588; font-weight: bold">0x50</span>},   <span style="color: #888888">// &amp; 0x26 38</span>
         {<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x07</span>,<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x00</span>},   <span style="color: #888888">// ' 0x27 39</span>
         {<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x1c</span>,<span style="color: #005588; font-weight: bold">0x22</span>,<span style="color: #005588; font-weight: bold">0x41</span>,<span style="color: #005588; font-weight: bold">0x00</span>},   <span style="color: #888888">// ( 0x28 40</span>
         {<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x41</span>,<span style="color: #005588; font-weight: bold">0x22</span>,<span style="color: #005588; font-weight: bold">0x1c</span>,<span style="color: #005588; font-weight: bold">0x00</span>},   <span style="color: #888888">// ) 0x29 41</span>
         {<span style="color: #005588; font-weight: bold">0x14</span>,<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x3e</span>,<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x14</span>},   <span style="color: #888888">// * 0x2a 42</span>
         {<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x3e</span>,<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x08</span>},   <span style="color: #888888">// + 0x2b 43</span>
         {<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x50</span>,<span style="color: #005588; font-weight: bold">0x30</span>,<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x00</span>},   <span style="color: #888888">// , 0x2c 44</span>
         {<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x08</span>},   <span style="color: #888888">// - 0x2d 45</span>
         {<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x60</span>,<span style="color: #005588; font-weight: bold">0x60</span>,<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x00</span>},   <span style="color: #888888">// . 0x2e 46</span>
         {<span style="color: #005588; font-weight: bold">0x20</span>,<span style="color: #005588; font-weight: bold">0x10</span>,<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x04</span>,<span style="color: #005588; font-weight: bold">0x02</span>},   <span style="color: #888888">// / 0x2f 47</span>
         {<span style="color: #005588; font-weight: bold">0x3e</span>,<span style="color: #005588; font-weight: bold">0x51</span>,<span style="color: #005588; font-weight: bold">0x49</span>,<span style="color: #005588; font-weight: bold">0x45</span>,<span style="color: #005588; font-weight: bold">0x3e</span>},   <span style="color: #888888">// 0 0x30 48</span>
         {<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x42</span>,<span style="color: #005588; font-weight: bold">0x7f</span>,<span style="color: #005588; font-weight: bold">0x40</span>,<span style="color: #005588; font-weight: bold">0x00</span>},   <span style="color: #888888">// 1 0x31 49</span>
         {<span style="color: #005588; font-weight: bold">0x42</span>,<span style="color: #005588; font-weight: bold">0x61</span>,<span style="color: #005588; font-weight: bold">0x51</span>,<span style="color: #005588; font-weight: bold">0x49</span>,<span style="color: #005588; font-weight: bold">0x46</span>},   <span style="color: #888888">// 2 0x32 50</span>
         {<span style="color: #005588; font-weight: bold">0x21</span>,<span style="color: #005588; font-weight: bold">0x41</span>,<span style="color: #005588; font-weight: bold">0x45</span>,<span style="color: #005588; font-weight: bold">0x4b</span>,<span style="color: #005588; font-weight: bold">0x31</span>},   <span style="color: #888888">// 3 0x33 51</span>
         {<span style="color: #005588; font-weight: bold">0x18</span>,<span style="color: #005588; font-weight: bold">0x14</span>,<span style="color: #005588; font-weight: bold">0x12</span>,<span style="color: #005588; font-weight: bold">0x7f</span>,<span style="color: #005588; font-weight: bold">0x10</span>},   <span style="color: #888888">// 4 0x34 52</span>
         {<span style="color: #005588; font-weight: bold">0x27</span>,<span style="color: #005588; font-weight: bold">0x45</span>,<span style="color: #005588; font-weight: bold">0x45</span>,<span style="color: #005588; font-weight: bold">0x45</span>,<span style="color: #005588; font-weight: bold">0x39</span>},   <span style="color: #888888">// 5 0x35 53</span>
         {<span style="color: #005588; font-weight: bold">0x3c</span>,<span style="color: #005588; font-weight: bold">0x4a</span>,<span style="color: #005588; font-weight: bold">0x49</span>,<span style="color: #005588; font-weight: bold">0x49</span>,<span style="color: #005588; font-weight: bold">0x30</span>},   <span style="color: #888888">// 6 0x36 54</span>
         {<span style="color: #005588; font-weight: bold">0x01</span>,<span style="color: #005588; font-weight: bold">0x71</span>,<span style="color: #005588; font-weight: bold">0x09</span>,<span style="color: #005588; font-weight: bold">0x05</span>,<span style="color: #005588; font-weight: bold">0x03</span>},   <span style="color: #888888">// 7 0x37 55</span>
         {<span style="color: #005588; font-weight: bold">0x36</span>,<span style="color: #005588; font-weight: bold">0x49</span>,<span style="color: #005588; font-weight: bold">0x49</span>,<span style="color: #005588; font-weight: bold">0x49</span>,<span style="color: #005588; font-weight: bold">0x36</span>},   <span style="color: #888888">// 8 0x38 56</span>
         {<span style="color: #005588; font-weight: bold">0x06</span>,<span style="color: #005588; font-weight: bold">0x49</span>,<span style="color: #005588; font-weight: bold">0x49</span>,<span style="color: #005588; font-weight: bold">0x29</span>,<span style="color: #005588; font-weight: bold">0x1e</span>},   <span style="color: #888888">// 9 0x39 57</span>
         {<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x36</span>,<span style="color: #005588; font-weight: bold">0x36</span>,<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x00</span>},   <span style="color: #888888">// : 0x3a 58</span>
         {<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x56</span>,<span style="color: #005588; font-weight: bold">0x36</span>,<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x00</span>},   <span style="color: #888888">// ; 0x3b 59</span>
         {<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x14</span>,<span style="color: #005588; font-weight: bold">0x22</span>,<span style="color: #005588; font-weight: bold">0x41</span>,<span style="color: #005588; font-weight: bold">0x00</span>},   <span style="color: #888888">// &lt; 0x3c 60</span>
         {<span style="color: #005588; font-weight: bold">0x14</span>,<span style="color: #005588; font-weight: bold">0x14</span>,<span style="color: #005588; font-weight: bold">0x14</span>,<span style="color: #005588; font-weight: bold">0x14</span>,<span style="color: #005588; font-weight: bold">0x14</span>},   <span style="color: #888888">// = 0x3d 61</span>
         {<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x41</span>,<span style="color: #005588; font-weight: bold">0x22</span>,<span style="color: #005588; font-weight: bold">0x14</span>,<span style="color: #005588; font-weight: bold">0x08</span>},   <span style="color: #888888">// &gt; 0x3e 62</span>
         {<span style="color: #005588; font-weight: bold">0x02</span>,<span style="color: #005588; font-weight: bold">0x01</span>,<span style="color: #005588; font-weight: bold">0x51</span>,<span style="color: #005588; font-weight: bold">0x09</span>,<span style="color: #005588; font-weight: bold">0x06</span>},   <span style="color: #888888">// ? 0x3f 63</span>
         {<span style="color: #005588; font-weight: bold">0x3e</span>,<span style="color: #005588; font-weight: bold">0x41</span>,<span style="color: #005588; font-weight: bold">0x5d</span>,<span style="color: #005588; font-weight: bold">0x49</span>,<span style="color: #005588; font-weight: bold">0x4e</span>},   <span style="color: #888888">// @ 0x40 64</span>
         {<span style="color: #005588; font-weight: bold">0x7e</span>,<span style="color: #005588; font-weight: bold">0x09</span>,<span style="color: #005588; font-weight: bold">0x09</span>,<span style="color: #005588; font-weight: bold">0x09</span>,<span style="color: #005588; font-weight: bold">0x7e</span>},   <span style="color: #888888">// A 0x41 65</span>
         {<span style="color: #005588; font-weight: bold">0x7f</span>,<span style="color: #005588; font-weight: bold">0x49</span>,<span style="color: #005588; font-weight: bold">0x49</span>,<span style="color: #005588; font-weight: bold">0x49</span>,<span style="color: #005588; font-weight: bold">0x36</span>},   <span style="color: #888888">// B 0x42 66</span>
         {<span style="color: #005588; font-weight: bold">0x3e</span>,<span style="color: #005588; font-weight: bold">0x41</span>,<span style="color: #005588; font-weight: bold">0x41</span>,<span style="color: #005588; font-weight: bold">0x41</span>,<span style="color: #005588; font-weight: bold">0x22</span>},   <span style="color: #888888">// C 0x43 67</span>
         {<span style="color: #005588; font-weight: bold">0x7f</span>,<span style="color: #005588; font-weight: bold">0x41</span>,<span style="color: #005588; font-weight: bold">0x41</span>,<span style="color: #005588; font-weight: bold">0x41</span>,<span style="color: #005588; font-weight: bold">0x3e</span>},   <span style="color: #888888">// D 0x44 68</span>
         {<span style="color: #005588; font-weight: bold">0x7f</span>,<span style="color: #005588; font-weight: bold">0x49</span>,<span style="color: #005588; font-weight: bold">0x49</span>,<span style="color: #005588; font-weight: bold">0x49</span>,<span style="color: #005588; font-weight: bold">0x41</span>},   <span style="color: #888888">// E 0x45 69</span>
         {<span style="color: #005588; font-weight: bold">0x7f</span>,<span style="color: #005588; font-weight: bold">0x09</span>,<span style="color: #005588; font-weight: bold">0x09</span>,<span style="color: #005588; font-weight: bold">0x09</span>,<span style="color: #005588; font-weight: bold">0x01</span>},   <span style="color: #888888">// F 0x46 70</span>
         {<span style="color: #005588; font-weight: bold">0x3e</span>,<span style="color: #005588; font-weight: bold">0x41</span>,<span style="color: #005588; font-weight: bold">0x49</span>,<span style="color: #005588; font-weight: bold">0x49</span>,<span style="color: #005588; font-weight: bold">0x7a</span>},   <span style="color: #888888">// G 0x47 71</span>
         {<span style="color: #005588; font-weight: bold">0x7f</span>,<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x7f</span>},   <span style="color: #888888">// H 0x48 72</span>
         {<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x41</span>,<span style="color: #005588; font-weight: bold">0x7f</span>,<span style="color: #005588; font-weight: bold">0x41</span>,<span style="color: #005588; font-weight: bold">0x00</span>},   <span style="color: #888888">// I 0x49 73</span>
         {<span style="color: #005588; font-weight: bold">0x20</span>,<span style="color: #005588; font-weight: bold">0x40</span>,<span style="color: #005588; font-weight: bold">0x41</span>,<span style="color: #005588; font-weight: bold">0x3f</span>,<span style="color: #005588; font-weight: bold">0x01</span>},   <span style="color: #888888">// J 0x4a 74</span>
         {<span style="color: #005588; font-weight: bold">0x7f</span>,<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x14</span>,<span style="color: #005588; font-weight: bold">0x22</span>,<span style="color: #005588; font-weight: bold">0x41</span>},   <span style="color: #888888">// K 0x4b 75</span>
         {<span style="color: #005588; font-weight: bold">0x7f</span>,<span style="color: #005588; font-weight: bold">0x40</span>,<span style="color: #005588; font-weight: bold">0x40</span>,<span style="color: #005588; font-weight: bold">0x40</span>,<span style="color: #005588; font-weight: bold">0x40</span>},   <span style="color: #888888">// L 0x4c 76</span>
         {<span style="color: #005588; font-weight: bold">0x7f</span>,<span style="color: #005588; font-weight: bold">0x02</span>,<span style="color: #005588; font-weight: bold">0x0c</span>,<span style="color: #005588; font-weight: bold">0x02</span>,<span style="color: #005588; font-weight: bold">0x7f</span>},   <span style="color: #888888">// M 0x4d 77</span>
         {<span style="color: #005588; font-weight: bold">0x7f</span>,<span style="color: #005588; font-weight: bold">0x04</span>,<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x10</span>,<span style="color: #005588; font-weight: bold">0x7f</span>},   <span style="color: #888888">// N 0x4e 78</span>
         {<span style="color: #005588; font-weight: bold">0x3e</span>,<span style="color: #005588; font-weight: bold">0x41</span>,<span style="color: #005588; font-weight: bold">0x41</span>,<span style="color: #005588; font-weight: bold">0x41</span>,<span style="color: #005588; font-weight: bold">0x3e</span>},   <span style="color: #888888">// O 0x4f 79</span>
         {<span style="color: #005588; font-weight: bold">0x7f</span>,<span style="color: #005588; font-weight: bold">0x09</span>,<span style="color: #005588; font-weight: bold">0x09</span>,<span style="color: #005588; font-weight: bold">0x09</span>,<span style="color: #005588; font-weight: bold">0x06</span>},   <span style="color: #888888">// P 0x50 80</span>
         {<span style="color: #005588; font-weight: bold">0x3e</span>,<span style="color: #005588; font-weight: bold">0x41</span>,<span style="color: #005588; font-weight: bold">0x51</span>,<span style="color: #005588; font-weight: bold">0x21</span>,<span style="color: #005588; font-weight: bold">0x5e</span>},   <span style="color: #888888">// Q 0x51 81</span>
         {<span style="color: #005588; font-weight: bold">0x7f</span>,<span style="color: #005588; font-weight: bold">0x09</span>,<span style="color: #005588; font-weight: bold">0x19</span>,<span style="color: #005588; font-weight: bold">0x29</span>,<span style="color: #005588; font-weight: bold">0x46</span>},   <span style="color: #888888">// R 0x52 82</span>
         {<span style="color: #005588; font-weight: bold">0x46</span>,<span style="color: #005588; font-weight: bold">0x49</span>,<span style="color: #005588; font-weight: bold">0x49</span>,<span style="color: #005588; font-weight: bold">0x49</span>,<span style="color: #005588; font-weight: bold">0x31</span>},   <span style="color: #888888">// S 0x53 83</span>
         {<span style="color: #005588; font-weight: bold">0x01</span>,<span style="color: #005588; font-weight: bold">0x01</span>,<span style="color: #005588; font-weight: bold">0x7f</span>,<span style="color: #005588; font-weight: bold">0x01</span>,<span style="color: #005588; font-weight: bold">0x01</span>},   <span style="color: #888888">// T 0x54 84</span>
         {<span style="color: #005588; font-weight: bold">0x3f</span>,<span style="color: #005588; font-weight: bold">0x40</span>,<span style="color: #005588; font-weight: bold">0x40</span>,<span style="color: #005588; font-weight: bold">0x40</span>,<span style="color: #005588; font-weight: bold">0x3f</span>},   <span style="color: #888888">// U 0x55 85</span>
         {<span style="color: #005588; font-weight: bold">0x0f</span>,<span style="color: #005588; font-weight: bold">0x30</span>,<span style="color: #005588; font-weight: bold">0x40</span>,<span style="color: #005588; font-weight: bold">0x30</span>,<span style="color: #005588; font-weight: bold">0x0f</span>},   <span style="color: #888888">// V 0x56 86</span>
         {<span style="color: #005588; font-weight: bold">0x3f</span>,<span style="color: #005588; font-weight: bold">0x40</span>,<span style="color: #005588; font-weight: bold">0x30</span>,<span style="color: #005588; font-weight: bold">0x40</span>,<span style="color: #005588; font-weight: bold">0x3f</span>},   <span style="color: #888888">// W 0x57 87</span>
         {<span style="color: #005588; font-weight: bold">0x63</span>,<span style="color: #005588; font-weight: bold">0x14</span>,<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x14</span>,<span style="color: #005588; font-weight: bold">0x63</span>},   <span style="color: #888888">// X 0x58 88</span>
         {<span style="color: #005588; font-weight: bold">0x07</span>,<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x70</span>,<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x07</span>},   <span style="color: #888888">// Y 0x59 89</span>
         {<span style="color: #005588; font-weight: bold">0x61</span>,<span style="color: #005588; font-weight: bold">0x51</span>,<span style="color: #005588; font-weight: bold">0x49</span>,<span style="color: #005588; font-weight: bold">0x45</span>,<span style="color: #005588; font-weight: bold">0x43</span>},   <span style="color: #888888">// Z 0x5a 90</span>
         {<span style="color: #005588; font-weight: bold">0x3c</span>,<span style="color: #005588; font-weight: bold">0x4a</span>,<span style="color: #005588; font-weight: bold">0x49</span>,<span style="color: #005588; font-weight: bold">0x29</span>,<span style="color: #005588; font-weight: bold">0x1e</span>},   <span style="color: #888888">// [ 0x5b 91</span>
         {<span style="color: #005588; font-weight: bold">0x02</span>,<span style="color: #005588; font-weight: bold">0x04</span>,<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x10</span>,<span style="color: #005588; font-weight: bold">0x20</span>},   <span style="color: #888888">// \ 0x5c 92</span>
         {<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x41</span>,<span style="color: #005588; font-weight: bold">0x7f</span>,<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x00</span>},   <span style="color: #888888">// ] 0x5d 93</span>
         {<span style="color: #005588; font-weight: bold">0x04</span>,<span style="color: #005588; font-weight: bold">0x02</span>,<span style="color: #005588; font-weight: bold">0x01</span>,<span style="color: #005588; font-weight: bold">0x02</span>,<span style="color: #005588; font-weight: bold">0x04</span>},   <span style="color: #888888">// ^ 0x5e 94</span>
         {<span style="color: #005588; font-weight: bold">0x40</span>,<span style="color: #005588; font-weight: bold">0x40</span>,<span style="color: #005588; font-weight: bold">0x40</span>,<span style="color: #005588; font-weight: bold">0x40</span>,<span style="color: #005588; font-weight: bold">0x40</span>},   <span style="color: #888888">// _ 0x5f 95</span>
         {<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x03</span>,<span style="color: #005588; font-weight: bold">0x04</span>,<span style="color: #005588; font-weight: bold">0x00</span>},   <span style="color: #888888">// ` 0x60 96</span>
         {<span style="color: #005588; font-weight: bold">0x20</span>,<span style="color: #005588; font-weight: bold">0x54</span>,<span style="color: #005588; font-weight: bold">0x54</span>,<span style="color: #005588; font-weight: bold">0x54</span>,<span style="color: #005588; font-weight: bold">0x78</span>},   <span style="color: #888888">// a 0x61 97</span>
         {<span style="color: #005588; font-weight: bold">0x7f</span>,<span style="color: #005588; font-weight: bold">0x48</span>,<span style="color: #005588; font-weight: bold">0x44</span>,<span style="color: #005588; font-weight: bold">0x44</span>,<span style="color: #005588; font-weight: bold">0x38</span>},   <span style="color: #888888">// b 0x62 98</span>
         {<span style="color: #005588; font-weight: bold">0x38</span>,<span style="color: #005588; font-weight: bold">0x44</span>,<span style="color: #005588; font-weight: bold">0x44</span>,<span style="color: #005588; font-weight: bold">0x44</span>,<span style="color: #005588; font-weight: bold">0x20</span>},   <span style="color: #888888">// c 0x63 99</span>
         {<span style="color: #005588; font-weight: bold">0x38</span>,<span style="color: #005588; font-weight: bold">0x44</span>,<span style="color: #005588; font-weight: bold">0x44</span>,<span style="color: #005588; font-weight: bold">0x48</span>,<span style="color: #005588; font-weight: bold">0x7f</span>},   <span style="color: #888888">// d 0x64 100</span>
         {<span style="color: #005588; font-weight: bold">0x38</span>,<span style="color: #005588; font-weight: bold">0x54</span>,<span style="color: #005588; font-weight: bold">0x54</span>,<span style="color: #005588; font-weight: bold">0x54</span>,<span style="color: #005588; font-weight: bold">0x18</span>},   <span style="color: #888888">// e 0x65 101</span>
         {<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x7e</span>,<span style="color: #005588; font-weight: bold">0x09</span>,<span style="color: #005588; font-weight: bold">0x01</span>,<span style="color: #005588; font-weight: bold">0x02</span>},   <span style="color: #888888">// f 0x66 102</span>
         {<span style="color: #005588; font-weight: bold">0x0c</span>,<span style="color: #005588; font-weight: bold">0x52</span>,<span style="color: #005588; font-weight: bold">0x52</span>,<span style="color: #005588; font-weight: bold">0x52</span>,<span style="color: #005588; font-weight: bold">0x3e</span>},   <span style="color: #888888">// g 0x67 103</span>
         {<span style="color: #005588; font-weight: bold">0x7f</span>,<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x04</span>,<span style="color: #005588; font-weight: bold">0x04</span>,<span style="color: #005588; font-weight: bold">0x78</span>},   <span style="color: #888888">// h 0x68 104</span>
         {<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x44</span>,<span style="color: #005588; font-weight: bold">0x7d</span>,<span style="color: #005588; font-weight: bold">0x40</span>,<span style="color: #005588; font-weight: bold">0x00</span>},   <span style="color: #888888">// i 0x69 105</span>
         {<span style="color: #005588; font-weight: bold">0x20</span>,<span style="color: #005588; font-weight: bold">0x40</span>,<span style="color: #005588; font-weight: bold">0x44</span>,<span style="color: #005588; font-weight: bold">0x3d</span>,<span style="color: #005588; font-weight: bold">0x00</span>},   <span style="color: #888888">// j 0x6a 106</span>
         {<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x7f</span>,<span style="color: #005588; font-weight: bold">0x10</span>,<span style="color: #005588; font-weight: bold">0x28</span>,<span style="color: #005588; font-weight: bold">0x44</span>},   <span style="color: #888888">// k 0x6b 107</span>
         {<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x41</span>,<span style="color: #005588; font-weight: bold">0x7f</span>,<span style="color: #005588; font-weight: bold">0x40</span>,<span style="color: #005588; font-weight: bold">0x00</span>},   <span style="color: #888888">// l 0x6c 108</span>
         {<span style="color: #005588; font-weight: bold">0x7c</span>,<span style="color: #005588; font-weight: bold">0x04</span>,<span style="color: #005588; font-weight: bold">0x18</span>,<span style="color: #005588; font-weight: bold">0x04</span>,<span style="color: #005588; font-weight: bold">0x78</span>},   <span style="color: #888888">// m 0x6d 109</span>
         {<span style="color: #005588; font-weight: bold">0x7c</span>,<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x04</span>,<span style="color: #005588; font-weight: bold">0x04</span>,<span style="color: #005588; font-weight: bold">0x78</span>},   <span style="color: #888888">// n 0x6e 110</span>
         {<span style="color: #005588; font-weight: bold">0x38</span>,<span style="color: #005588; font-weight: bold">0x44</span>,<span style="color: #005588; font-weight: bold">0x44</span>,<span style="color: #005588; font-weight: bold">0x44</span>,<span style="color: #005588; font-weight: bold">0x38</span>},   <span style="color: #888888">// o 0x6f 111</span>
         {<span style="color: #005588; font-weight: bold">0x7c</span>,<span style="color: #005588; font-weight: bold">0x14</span>,<span style="color: #005588; font-weight: bold">0x14</span>,<span style="color: #005588; font-weight: bold">0x14</span>,<span style="color: #005588; font-weight: bold">0x08</span>},   <span style="color: #888888">// p 0x70 112</span>
         {<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x14</span>,<span style="color: #005588; font-weight: bold">0x14</span>,<span style="color: #005588; font-weight: bold">0x18</span>,<span style="color: #005588; font-weight: bold">0x7c</span>},   <span style="color: #888888">// q 0x71 113</span>
         {<span style="color: #005588; font-weight: bold">0x7c</span>,<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x04</span>,<span style="color: #005588; font-weight: bold">0x04</span>,<span style="color: #005588; font-weight: bold">0x08</span>},   <span style="color: #888888">// r 0x72 114</span>
         {<span style="color: #005588; font-weight: bold">0x48</span>,<span style="color: #005588; font-weight: bold">0x54</span>,<span style="color: #005588; font-weight: bold">0x54</span>,<span style="color: #005588; font-weight: bold">0x54</span>,<span style="color: #005588; font-weight: bold">0x20</span>},   <span style="color: #888888">// s 0x73 115</span>
         {<span style="color: #005588; font-weight: bold">0x04</span>,<span style="color: #005588; font-weight: bold">0x3f</span>,<span style="color: #005588; font-weight: bold">0x44</span>,<span style="color: #005588; font-weight: bold">0x40</span>,<span style="color: #005588; font-weight: bold">0x20</span>},   <span style="color: #888888">// t 0x74 116</span>
         {<span style="color: #005588; font-weight: bold">0x3c</span>,<span style="color: #005588; font-weight: bold">0x40</span>,<span style="color: #005588; font-weight: bold">0x40</span>,<span style="color: #005588; font-weight: bold">0x20</span>,<span style="color: #005588; font-weight: bold">0x7c</span>},   <span style="color: #888888">// u 0x75 117</span>
         {<span style="color: #005588; font-weight: bold">0x1c</span>,<span style="color: #005588; font-weight: bold">0x20</span>,<span style="color: #005588; font-weight: bold">0x40</span>,<span style="color: #005588; font-weight: bold">0x20</span>,<span style="color: #005588; font-weight: bold">0x1c</span>},   <span style="color: #888888">// v 0x76 118</span>
         {<span style="color: #005588; font-weight: bold">0x3c</span>,<span style="color: #005588; font-weight: bold">0x40</span>,<span style="color: #005588; font-weight: bold">0x30</span>,<span style="color: #005588; font-weight: bold">0x40</span>,<span style="color: #005588; font-weight: bold">0x3c</span>},   <span style="color: #888888">// w 0x77 119</span>
         {<span style="color: #005588; font-weight: bold">0x44</span>,<span style="color: #005588; font-weight: bold">0x28</span>,<span style="color: #005588; font-weight: bold">0x10</span>,<span style="color: #005588; font-weight: bold">0x28</span>,<span style="color: #005588; font-weight: bold">0x44</span>},   <span style="color: #888888">// x 0x78 120</span>
         {<span style="color: #005588; font-weight: bold">0x0c</span>,<span style="color: #005588; font-weight: bold">0x50</span>,<span style="color: #005588; font-weight: bold">0x50</span>,<span style="color: #005588; font-weight: bold">0x50</span>,<span style="color: #005588; font-weight: bold">0x3c</span>},   <span style="color: #888888">// y 0x79 121</span>
         {<span style="color: #005588; font-weight: bold">0x44</span>,<span style="color: #005588; font-weight: bold">0x64</span>,<span style="color: #005588; font-weight: bold">0x54</span>,<span style="color: #005588; font-weight: bold">0x4c</span>,<span style="color: #005588; font-weight: bold">0x44</span>},   <span style="color: #888888">// z 0x7a 122</span>
         {<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x36</span>,<span style="color: #005588; font-weight: bold">0x41</span>,<span style="color: #005588; font-weight: bold">0x41</span>},   <span style="color: #888888">// { 0x7b 123</span>
         {<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x7f</span>,<span style="color: #005588; font-weight: bold">0x00</span>,<span style="color: #005588; font-weight: bold">0x00</span>},   <span style="color: #888888">// | 0x7c 124</span>
         {<span style="color: #005588; font-weight: bold">0x41</span>,<span style="color: #005588; font-weight: bold">0x41</span>,<span style="color: #005588; font-weight: bold">0x36</span>,<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x00</span>},   <span style="color: #888888">// } 0x7d 125</span>
         {<span style="color: #005588; font-weight: bold">0x04</span>,<span style="color: #005588; font-weight: bold">0x02</span>,<span style="color: #005588; font-weight: bold">0x04</span>,<span style="color: #005588; font-weight: bold">0x08</span>,<span style="color: #005588; font-weight: bold">0x04</span>},   <span style="color: #888888">// ~ 0x7e 126</span>
     };



String string2show <span style="color: #333333">=</span> <span style="background-color: #fff0f0">"ECE5725"</span>;

<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">setup</span>() {
  FastLED.addLeds<span style="color: #333333">&lt;</span>APA102<span style="color: #333333">&gt;</span>(leds, NUM_LEDS);  <span style="color: #888888">// setup the led strip using fast-led lib</span>
  Serial.begin(<span style="color: #0000DD; font-weight: bold">57600</span>);                      <span style="color: #888888">// set the serial baud rate 57600 is the download rate of arduino. So we can wirelessly upload.</span>
  attachInterrupt(digitalPinToInterrupt(<span style="color: #0000DD; font-weight: bold">2</span>), rpm_cal, FALLING);  <span style="color: #888888">// setup the external interrupt</span>

<span style="color: #888888">// now it is the start mode code sectoin in arduino</span>

  clean_buffer(); <span style="color: #888888">// clean the buffer </span>
  <span style="color: #008800; font-weight: bold">while</span> (Serial.available() <span style="color: #333333">==</span> <span style="color: #0000DD; font-weight: bold">0</span>) {}    <span style="color: #888888">//wait until there are some information come in  </span>
  delay(<span style="color: #0000DD; font-weight: bold">100</span>);                           <span style="color: #888888">// wait to receive the whole data</span>
  btdata <span style="color: #333333">=</span> Serial.readString();         <span style="color: #888888">//read the data and store the data in btdata</span>
  <span style="color: #008800; font-weight: bold">if</span>(btdata <span style="color: #333333">==</span> <span style="background-color: #fff0f0">"1"</span>) led_test1();        <span style="color: #888888">//actually there will not be orther command here is just to show it can receive the right data. So actually it is a debug point</span>
                                        <span style="color: #888888">//execute the led test program</span>
  Serial.println(<span style="background-color: #fff0f0">"test1"</span>);              <span style="color: #888888">//send back the respond to raspberry pi   </span>
}


<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">loop</span>() {
  <span style="color: #008800; font-weight: bold">if</span>(update_frame <span style="color: #333333">==</span> <span style="color: #0000DD; font-weight: bold">1</span> ) {
    update_frame <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>; 
     
    <span style="color: #008800; font-weight: bold">if</span>(print_mode <span style="color: #333333">==</span> <span style="color: #0000DD; font-weight: bold">4</span>) {
      circle_count <span style="color: #333333">=</span> circle_count <span style="color: #333333">+</span> <span style="color: #0000DD; font-weight: bold">1</span>;
      show_frame(<span style="color: #0000DD; font-weight: bold">2</span>,<span style="color: #0000DD; font-weight: bold">100</span>,<span style="color: #005588; font-weight: bold">0xFF00FF</span>);
  
      
      <span style="color: #008800; font-weight: bold">if</span> (circle_count  <span style="color: #333333">==</span> rate) {  <span style="color: #888888">//updafe spectrum every (rate) circles</span>
        music_update_frame <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">1</span>;     <span style="color: #888888">//allow to update music spectrum frame</span>
        Serial.println(<span style="background-color: #fff0f0">"go"</span>);       <span style="color: #888888">//send signal to Rp3 to send new data to buffer</span>
        circle_count <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;
      }
    }
    <span style="color: #008800; font-weight: bold">else</span>
      show_frame(<span style="color: #0000DD; font-weight: bold">1</span>, <span style="color: #0000DD; font-weight: bold">100</span>, color_select); <span style="color: #888888">//show text when the print_mode is not 4 </span>
      
    <span style="color: #888888">//speed control</span>
    <span style="color: #888888">//update_frame the rpm and trasmit the signal to raspberry pi. </span>
    <span style="color: #888888">//When the spped is up to 25 rpm. It will send a signal to raspberry pi to tell the motor starts correctly</span>
    
    <span style="color: #008800; font-weight: bold">if</span> (millis() <span style="color: #333333">-</span> lastmillis <span style="color: #333333">&gt;=</span> <span style="color: #0000DD; font-weight: bold">1000</span> <span style="color: #333333">&amp;&amp;</span>speedtest <span style="color: #333333">==</span> <span style="color: #0000DD; font-weight: bold">0</span>){ 
      speed_control();
     }

   
    <span style="color: #888888">//receive the command and stop receiving command in music mode</span>
    <span style="color: #008800; font-weight: bold">if</span> (Serial.available() <span style="color: #333333">&amp;&amp;</span> music_mode <span style="color: #333333">==</span> <span style="color: #0000DD; font-weight: bold">0</span>) {
      parse_command();
    }
    
    <span style="color: #888888">//change the print text according to the display mode when it is not in music mode</span>
  <span style="color: #008800; font-weight: bold">if</span>(print_mode <span style="color: #333333">!=</span> <span style="color: #0000DD; font-weight: bold">4</span>)
    parse_print();

  } 
}

<span style="color: #888888">//interrupt funtion enter this function every circle</span>
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">rpm_cal</span>() {
  time_pins <span style="color: #333333">++</span>;
  update_frame <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">1</span>; 
}

<span style="color: #888888">//this is a test fuction. It will display on - off loop for x times </span>
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">display_test</span>(<span style="color: #333399; font-weight: bold">int</span> times){
   <span style="color: #008800; font-weight: bold">for</span> (<span style="color: #333399; font-weight: bold">int</span> i <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span> ; i<span style="color: #333333">&lt;</span> times ; i<span style="color: #333333">++</span>) {
      <span style="color: #008800; font-weight: bold">for</span> (<span style="color: #333399; font-weight: bold">int</span> j <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>; j <span style="color: #333333">&lt;</span> <span style="color: #0000DD; font-weight: bold">8</span>; j <span style="color: #333333">++</span>) {
        leds[j] <span style="color: #333333">=</span> CRGB<span style="color: #333333">::</span>Red;
      }
      FastLED.show();
      <span style="color: #008800; font-weight: bold">for</span> (<span style="color: #333399; font-weight: bold">int</span> j <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>; j <span style="color: #333333">&lt;</span> <span style="color: #0000DD; font-weight: bold">8</span>; j <span style="color: #333333">++</span>) {
        leds[j] <span style="color: #333333">=</span> CRGB<span style="color: #333333">::</span>Black;
      }
      FastLED.show(); 
   }
}



        
<span style="color: #888888">//This is the initial led test program. All 8 leds will show red, green and blue</span>
  <span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">led_test1</span>() {
     <span style="color: #008800; font-weight: bold">for</span> (<span style="color: #333399; font-weight: bold">int</span> i<span style="color: #333333">=</span><span style="color: #0000DD; font-weight: bold">0</span>; i<span style="color: #333333">&lt;</span><span style="color: #0000DD; font-weight: bold">8</span>; i<span style="color: #333333">++</span>) {                
         leds[i] <span style="color: #333333">=</span> CRGB<span style="color: #333333">::</span>Blue;
         }
         FastLED.show();
      delay(<span style="color: #0000DD; font-weight: bold">1000</span>);
      
     <span style="color: #008800; font-weight: bold">for</span> (<span style="color: #333399; font-weight: bold">int</span> i<span style="color: #333333">=</span><span style="color: #0000DD; font-weight: bold">0</span>; i<span style="color: #333333">&lt;</span><span style="color: #0000DD; font-weight: bold">8</span>; i<span style="color: #333333">++</span>) {                
         leds[i] <span style="color: #333333">=</span> CRGB<span style="color: #333333">::</span>Green;
     }
     FastLED.show();
     delay(<span style="color: #0000DD; font-weight: bold">1000</span>);
     
     <span style="color: #008800; font-weight: bold">for</span> (<span style="color: #333399; font-weight: bold">int</span> i<span style="color: #333333">=</span><span style="color: #0000DD; font-weight: bold">0</span>; i<span style="color: #333333">&lt;</span><span style="color: #0000DD; font-weight: bold">8</span>; i<span style="color: #333333">++</span>) {                
         leds[i] <span style="color: #333333">=</span> CRGB<span style="color: #333333">::</span>Red;
     }
     FastLED.show();
     delay(<span style="color: #0000DD; font-weight: bold">1000</span>);

     <span style="color: #008800; font-weight: bold">for</span> (<span style="color: #333399; font-weight: bold">int</span> i<span style="color: #333333">=</span><span style="color: #0000DD; font-weight: bold">0</span>; i<span style="color: #333333">&lt;</span><span style="color: #0000DD; font-weight: bold">8</span>; i<span style="color: #333333">++</span>) {                
         leds[i] <span style="color: #333333">=</span> CRGB<span style="color: #333333">::</span>Black;
     }
     FastLED.show();
     
  }
  


<span style="color: #888888">//this is the function to print single letter</span>
<span style="color: #888888">//ch is the character index which is corresponded to the char list </span>
<span style="color: #888888">//interval is the interval between each letter</span>
<span style="color: #888888">//color is the color to display this letter which is 24 bit Ex. 0xFF0000 is red</span>
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">printLetter_new</span>(<span style="color: #333399; font-weight: bold">char</span> ch, <span style="color: #333399; font-weight: bold">int</span> interval,<span style="color: #333399; font-weight: bold">long</span> color,<span style="color: #333399; font-weight: bold">int</span> interval_unit)
  {    
    <span style="color: #008800; font-weight: bold">if</span> (ch <span style="color: #333333">&lt;</span> <span style="color: #0000DD; font-weight: bold">32</span> <span style="color: #333333">||</span> ch <span style="color: #333333">&gt;</span> <span style="color: #0000DD; font-weight: bold">126</span>){
      ch <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">32</span>;
      }
    ch <span style="color: #333333">-=</span> <span style="color: #0000DD; font-weight: bold">32</span>;
    <span style="color: #008800; font-weight: bold">for</span> (<span style="color: #333399; font-weight: bold">int</span> i<span style="color: #333333">=</span>charWidth<span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">1</span>; i<span style="color: #333333">&gt;-</span><span style="color: #0000DD; font-weight: bold">1</span>; i<span style="color: #333333">--</span>) {
      byte b <span style="color: #333333">=</span> font[ch][i];
      <span style="color: #008800; font-weight: bold">if</span>(i <span style="color: #333333">!=</span> <span style="color: #0000DD; font-weight: bold">0</span>)
      show_sigleunit(color,b,<span style="color: #0000DD; font-weight: bold">1</span>,interval_unit);
      <span style="color: #008800; font-weight: bold">else</span> <span style="color: #008800; font-weight: bold">if</span>( i <span style="color: #333333">==</span> <span style="color: #0000DD; font-weight: bold">0</span> <span style="color: #333333">&amp;&amp;</span> k <span style="color: #333333">!=</span> <span style="color: #0000DD; font-weight: bold">0</span>)
      show_sigleunit(color,b,<span style="color: #0000DD; font-weight: bold">1</span>,interval_unit<span style="color: #333333">+</span>interval);
      <span style="color: #008800; font-weight: bold">else</span> <span style="color: #008800; font-weight: bold">if</span>( i <span style="color: #333333">==</span> <span style="color: #0000DD; font-weight: bold">0</span> <span style="color: #333333">&amp;&amp;</span> k <span style="color: #333333">==</span> <span style="color: #0000DD; font-weight: bold">0</span>)
      show_sigleunit(color,b,<span style="color: #0000DD; font-weight: bold">1</span>,interval_unit);
    }
  }



<span style="color: #888888">//This is the frame update function </span>
<span style="color: #888888">//content is the mode number</span>
<span style="color: #888888">//1 is to show letter </span>
<span style="color: #888888">//2 is to show music spectrum</span>
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">show_frame</span>(<span style="color: #333399; font-weight: bold">int</span> content, <span style="color: #333399; font-weight: bold">int</span> total_number,<span style="color: #333399; font-weight: bold">long</span> color) {
  <span style="color: #008800; font-weight: bold">if</span>(content <span style="color: #333333">==</span> <span style="color: #0000DD; font-weight: bold">1</span>) {
    str_len <span style="color: #333333">=</span> string2show.length();
    black_len <span style="color: #333333">=</span> (total_number <span style="color: #333333">-</span> str_len<span style="color: #333333">*</span><span style="color: #0000DD; font-weight: bold">5</span> <span style="color: #333333">-</span> (str_len<span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">1</span>)<span style="color: #333333">*</span><span style="color: #0000DD; font-weight: bold">3</span>)<span style="color: #333333">/</span><span style="color: #0000DD; font-weight: bold">2</span>;
    show_sigleunit(<span style="color: #005588; font-weight: bold">0x00000</span>,<span style="color: #005588; font-weight: bold">0xFF</span>,black_len,<span style="color: #0000DD; font-weight: bold">0</span>);
    <span style="color: #008800; font-weight: bold">for</span>(k <span style="color: #333333">=</span> string2show.length(); k<span style="color: #333333">&gt;-</span><span style="color: #0000DD; font-weight: bold">1</span>; k<span style="color: #333333">--</span>)
    printLetter_new(string2show.charAt(k),<span style="color: #0000DD; font-weight: bold">1</span>,color,<span style="color: #0000DD; font-weight: bold">1</span>);
}

  <span style="color: #008800; font-weight: bold">if</span>(content <span style="color: #333333">==</span> <span style="color: #0000DD; font-weight: bold">2</span>){
      show_sigleunit(<span style="color: #005588; font-weight: bold">0x00000</span>,<span style="color: #005588; font-weight: bold">0xFF</span>,<span style="color: #0000DD; font-weight: bold">40</span>,<span style="color: #0000DD; font-weight: bold">0</span>);
    <span style="color: #008800; font-weight: bold">if</span> (music_update_frame <span style="color: #333333">==</span> <span style="color: #0000DD; font-weight: bold">1</span>){   <span style="color: #888888">//when the frame is updated, read data from buffer and display </span>
      <span style="color: #008800; font-weight: bold">for</span>(<span style="color: #333399; font-weight: bold">int</span> m <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>; m<span style="color: #333333">&lt;</span> <span style="color: #0000DD; font-weight: bold">8</span>; m<span style="color: #333333">++</span>)
      {
        music <span style="color: #333333">=</span> Serial.read();
        music_his[m] <span style="color: #333333">=</span> (<span style="color: #005588; font-weight: bold">0xFF</span><span style="color: #333333">&lt;&lt;</span> (<span style="color: #0000DD; font-weight: bold">56</span><span style="color: #333333">-</span>music));
        show_sigleunit(color,  music_his[m], <span style="color: #0000DD; font-weight: bold">8</span>, <span style="color: #0000DD; font-weight: bold">2</span>); 
        music_update_frame <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;
      }
    }
    
    <span style="color: #008800; font-weight: bold">else</span> <span style="color: #008800; font-weight: bold">if</span>(music_update_frame <span style="color: #333333">==</span> <span style="color: #0000DD; font-weight: bold">0</span>) {  <span style="color: #888888">//when the frame is not updated, read data from buffer history</span>
      <span style="color: #008800; font-weight: bold">for</span>(<span style="color: #333399; font-weight: bold">int</span> m <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>; m<span style="color: #333333">&lt;</span> <span style="color: #0000DD; font-weight: bold">8</span>; m<span style="color: #333333">++</span>)
      { 
        show_sigleunit(color,  music_his[m], <span style="color: #0000DD; font-weight: bold">8</span>, <span style="color: #0000DD; font-weight: bold">2</span>); 
      }
    }
  } 
}


<span style="color: #888888">//This function is to show single unit.</span>
<span style="color: #888888">//A unit is a combination of showing single-line</span>
<span style="color: #888888">//color is the 24 bit color </span>
<span style="color: #888888">//b is the code to display</span>
<span style="color: #888888">//width_color is the led length we want to display </span>
<span style="color: #888888">//width_black is the black length we want to display </span>
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">show_sigleunit</span>(<span style="color: #333399; font-weight: bold">long</span> color,byte b, <span style="color: #333399; font-weight: bold">int</span> width_color, <span style="color: #333399; font-weight: bold">int</span> width_black ) {
  <span style="color: #008800; font-weight: bold">for</span> (<span style="color: #333399; font-weight: bold">int</span> i <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span> ; i<span style="color: #333333">&lt;</span>width_color ; i<span style="color: #333333">++</span>)
  show_singleline(color,b);
  <span style="color: #008800; font-weight: bold">for</span> (<span style="color: #333399; font-weight: bold">int</span> i <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span> ; i<span style="color: #333333">&lt;</span>width_black ; i<span style="color: #333333">++</span>)
  show_singleline(<span style="color: #005588; font-weight: bold">0x000000</span>,<span style="color: #005588; font-weight: bold">0xFF</span>);
}


<span style="color: #888888">//This is the function to show the single line </span>
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">show_singleline</span>(<span style="color: #333399; font-weight: bold">long</span> color, byte b){
  <span style="color: #008800; font-weight: bold">for</span> (<span style="color: #333399; font-weight: bold">int</span> i<span style="color: #333333">=</span><span style="color: #0000DD; font-weight: bold">0</span>; i<span style="color: #333333">&lt;</span><span style="color: #0000DD; font-weight: bold">8</span>; i<span style="color: #333333">++</span>) {
    <span style="color: #008800; font-weight: bold">if</span> (bitRead(b,i))               
       leds[i] <span style="color: #333333">=</span> color;
    <span style="color: #008800; font-weight: bold">else</span>
       leds[i] <span style="color: #333333">=</span> <span style="color: #005588; font-weight: bold">0x000000</span>;
  }
  FastLED.show();
  
}

<span style="color: #888888">//this fucniton is to convert the time to the right format to display</span>
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">time_converter</span>(<span style="color: #333399; font-weight: bold">int</span> hour, <span style="color: #333399; font-weight: bold">int</span> mini, <span style="color: #333399; font-weight: bold">int</span> second)
{
  <span style="color: #008800; font-weight: bold">if</span> (hour<span style="color: #333333">&lt;</span><span style="color: #0000DD; font-weight: bold">10</span>) {
    H <span style="color: #333333">=</span> hour;
    H <span style="color: #333333">=</span> <span style="background-color: #fff0f0">"0"</span> <span style="color: #333333">+</span> H;}
    <span style="color: #008800; font-weight: bold">else</span> 
    H <span style="color: #333333">=</span> hour;
    
    <span style="color: #008800; font-weight: bold">if</span> (mini <span style="color: #333333">&lt;</span> <span style="color: #0000DD; font-weight: bold">10</span>) {
    M <span style="color: #333333">=</span> mini;
    M <span style="color: #333333">=</span> <span style="background-color: #fff0f0">"0"</span> <span style="color: #333333">+</span> M;}
    <span style="color: #008800; font-weight: bold">else</span> 
    M <span style="color: #333333">=</span> mini;
    
    <span style="color: #008800; font-weight: bold">if</span> (second <span style="color: #333333">&lt;</span> <span style="color: #0000DD; font-weight: bold">10</span>) {
    S <span style="color: #333333">=</span> second;
    S <span style="color: #333333">=</span> <span style="background-color: #fff0f0">"0"</span> <span style="color: #333333">+</span> S;}
    <span style="color: #008800; font-weight: bold">else</span> 
    S <span style="color: #333333">=</span> second;
    string2show <span style="color: #333333">=</span> H <span style="color: #333333">+</span> <span style="background-color: #fff0f0">":"</span> <span style="color: #333333">+</span> M <span style="color: #333333">+</span> <span style="background-color: #fff0f0">":"</span> <span style="color: #333333">+</span> S ;
}


<span style="color: #888888">//This function is to parse the print content</span>
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">parse_print</span>() {
    <span style="color: #008800; font-weight: bold">if</span>(print_mode <span style="color: #333333">==</span> <span style="color: #0000DD; font-weight: bold">1</span>) {
    string2show <span style="color: #333333">=</span> <span style="background-color: #fff0f0">"ECE5725"</span>;
    color_select <span style="color: #333333">=</span> <span style="color: #005588; font-weight: bold">0xFF0000</span>;
    }

  
  <span style="color: #008800; font-weight: bold">else</span> <span style="color: #008800; font-weight: bold">if</span> (print_mode <span style="color: #333333">==</span> <span style="color: #0000DD; font-weight: bold">2</span>){
    string2show <span style="color: #333333">=</span> <span style="background-color: #fff0f0">"INFINITE"</span>;
    color_select <span style="color: #333333">=</span> <span style="color: #005588; font-weight: bold">0xFFF000</span>;
  }
    
  <span style="color: #008800; font-weight: bold">else</span> <span style="color: #008800; font-weight: bold">if</span> (print_mode <span style="color: #333333">==</span> <span style="color: #0000DD; font-weight: bold">3</span>) {
   
    <span style="color: #008800; font-weight: bold">if</span> (time_update_frame <span style="color: #333333">==</span> <span style="color: #0000DD; font-weight: bold">1</span>) {
      time_update_frame <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;
      second <span style="color: #333333">=</span> second <span style="color: #333333">+</span> <span style="color: #0000DD; font-weight: bold">1</span>;
    
    <span style="color: #008800; font-weight: bold">if</span> (second <span style="color: #333333">&gt;=</span> <span style="color: #0000DD; font-weight: bold">60</span>) {
      mini <span style="color: #333333">=</span> mini <span style="color: #333333">+</span> <span style="color: #0000DD; font-weight: bold">1</span>;
      second <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;
    }
     <span style="color: #008800; font-weight: bold">if</span> (mini <span style="color: #333333">&gt;=</span> <span style="color: #0000DD; font-weight: bold">60</span> ) {
      hour <span style="color: #333333">=</span> hour <span style="color: #333333">+</span> <span style="color: #0000DD; font-weight: bold">1</span>;
      mini <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;
     }
     
      <span style="color: #008800; font-weight: bold">if</span> (hour <span style="color: #333333">==</span> <span style="color: #0000DD; font-weight: bold">24</span>){
      hour <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">1</span>;
  }
 time_converter(hour,mini,second);
  }
}

  <span style="color: #008800; font-weight: bold">else</span> 
  string2show <span style="color: #333333">=</span> btdata;
}

<span style="color: #888888">//This is the speed calculation function</span>
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">speed_control</span>(){
   detachInterrupt(<span style="color: #0000DD; font-weight: bold">0</span>);<span style="color: #888888">//Disable interrupt when calculating</span>
   rpm <span style="color: #333333">=</span> time_pins; <span style="color: #888888">// Convert frecuency to RPM, note: this works for one interruption per full rotation. For two interrups per full rotation use time_pins * 30.</span>
   <span style="color: #008800; font-weight: bold">if</span>(rpm <span style="color: #333333">&gt;=</span> <span style="color: #0000DD; font-weight: bold">25</span> <span style="color: #333333">&amp;&amp;</span> speedtest <span style="color: #333333">==</span> <span style="color: #0000DD; font-weight: bold">0</span>) {
   Serial.println(<span style="background-color: #fff0f0">"test2"</span>); <span style="color: #888888">// print the rpm value.</span>
   speedtest <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">1</span>;
   }
   time_pins <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>; <span style="color: #888888">// Restart the RPM counter</span>
   lastmillis <span style="color: #333333">=</span> millis(); <span style="color: #888888">// Uptade lasmillis</span>
   attachInterrupt(<span style="color: #0000DD; font-weight: bold">0</span>, rpm_cal, FALLING); <span style="color: #888888">//enable interrupt</span>
}

<span style="color: #888888">//This is the command parse function.</span>
<span style="color: #888888">//It will read in the command and then parse it to different display mode</span>
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">parse_command</span>() {
    btdata <span style="color: #333333">=</span> Serial.read();     <span style="color: #888888">//read String is very slow so we should use read byte</span>
    <span style="color: #008800; font-weight: bold">if</span>(btdata <span style="color: #333333">==</span> <span style="background-color: #fff0f0">"50"</span>) {
      print_mode <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">2</span>;
      time_start <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;
      clean_buffer();
    }
  
    <span style="color: #008800; font-weight: bold">else</span> <span style="color: #008800; font-weight: bold">if</span>(btdata <span style="color: #333333">==</span> <span style="background-color: #fff0f0">"51"</span> ) {
      <span style="color: #008800; font-weight: bold">if</span> (time_start <span style="color: #333333">==</span> <span style="color: #0000DD; font-weight: bold">0</span>) {
      hour <span style="color: #333333">=</span> ((Serial.read()<span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">48</span>)<span style="color: #333333">*</span><span style="color: #0000DD; font-weight: bold">10</span> <span style="color: #333333">+</span> Serial.read()<span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">48</span>);
      mini <span style="color: #333333">=</span> ((Serial.read()<span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">48</span>)<span style="color: #333333">*</span><span style="color: #0000DD; font-weight: bold">10</span> <span style="color: #333333">+</span> Serial.read()<span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">48</span>);
      second <span style="color: #333333">=</span> ((Serial.read()<span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">48</span>)<span style="color: #333333">*</span><span style="color: #0000DD; font-weight: bold">10</span> <span style="color: #333333">+</span> Serial.read()<span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">48</span>);
      time_converter(hour,mini,second);
      print_mode <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">3</span>;  
      time_start <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">1</span>;
      }
      <span style="color: #008800; font-weight: bold">else</span>{
      print_mode <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">3</span>;  
      time_update_frame <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">1</span>;
      
      }
      clean_buffer();
   }
    <span style="color: #008800; font-weight: bold">else</span> <span style="color: #008800; font-weight: bold">if</span>(btdata <span style="color: #333333">==</span> <span style="background-color: #fff0f0">"52"</span>) { <span style="color: #888888">//music mode</span>
      print_mode <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">4</span>;
      time_start <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;
      music_mode <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">1</span>;
    }
    
  
  <span style="color: #008800; font-weight: bold">else</span> {
    print_mode <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">5</span>;
    time_start <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;
    clean_buffer();
    } 
    
}

<span style="color: #888888">//This is the clean buffer function which is to clean the serial buffer</span>
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">clean_buffer</span>() {  <span style="color: #888888">//second version which is faster</span>
  <span style="color: #008800; font-weight: bold">while</span> (Serial.available()) {
  trash <span style="color: #333333">=</span> Serial.read();
}
}
</pre></td>
                        </tr>
                    </tbody></table>
                </div>
            </div>
            <button type="button" class="btn btn-info" data-toggle="collapse" data-target="#py_code">web_version_Rpi3.py</button>
            <div id="py_code" class="collapse" style="clear:left">
                <!-- HTML generated using hilite.me -->
                <div style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">
                    <table>
                        <tbody><tr>
                            <td><pre style="margin: 0; line-height: 125%">  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248</pre></td>
                            <td><pre style="margin: 0; line-height: 125%"><span style="color: #008800; font-weight: bold">import</span> <span style="color: #0e84b5; font-weight: bold">socket</span>
<span style="color: #008800; font-weight: bold">import</span> <span style="color: #0e84b5; font-weight: bold">time</span>
<span style="color: #008800; font-weight: bold">import</span> <span style="color: #0e84b5; font-weight: bold">RPi.GPIO</span> <span style="color: #008800; font-weight: bold">as</span> <span style="color: #0e84b5; font-weight: bold">GPIO</span>
<span style="color: #008800; font-weight: bold">import</span> <span style="color: #0e84b5; font-weight: bold">os</span>
<span style="color: #008800; font-weight: bold">import</span> <span style="color: #0e84b5; font-weight: bold">datetime</span>
<span style="color: #008800; font-weight: bold">import</span> <span style="color: #0e84b5; font-weight: bold">alsaaudio</span> <span style="color: #008800; font-weight: bold">as</span> <span style="color: #0e84b5; font-weight: bold">aa</span>
<span style="color: #008800; font-weight: bold">import</span> <span style="color: #0e84b5; font-weight: bold">wave</span>
<span style="color: #008800; font-weight: bold">from</span> <span style="color: #0e84b5; font-weight: bold">struct</span> <span style="color: #008800; font-weight: bold">import</span> unpack
<span style="color: #008800; font-weight: bold">import</span> <span style="color: #0e84b5; font-weight: bold">numpy</span> <span style="color: #008800; font-weight: bold">as</span> <span style="color: #0e84b5; font-weight: bold">np</span>

<span style="color: #888888"># some variables for FFT</span>
spectrum <span style="color: #333333">=</span> [<span style="color: #0000DD; font-weight: bold">1</span>,<span style="color: #0000DD; font-weight: bold">1</span>,<span style="color: #0000DD; font-weight: bold">1</span>,<span style="color: #0000DD; font-weight: bold">3</span>,<span style="color: #0000DD; font-weight: bold">3</span>,<span style="color: #0000DD; font-weight: bold">3</span>,<span style="color: #0000DD; font-weight: bold">2</span>,<span style="color: #0000DD; font-weight: bold">2</span>]
matrix <span style="color: #333333">=</span> [<span style="color: #0000DD; font-weight: bold">0</span>,<span style="color: #0000DD; font-weight: bold">0</span>,<span style="color: #0000DD; font-weight: bold">0</span>,<span style="color: #0000DD; font-weight: bold">0</span>,<span style="color: #0000DD; font-weight: bold">0</span>,<span style="color: #0000DD; font-weight: bold">0</span>,<span style="color: #0000DD; font-weight: bold">0</span>,<span style="color: #0000DD; font-weight: bold">0</span>]
result <span style="color: #333333">=</span> <span style="background-color: #fff0f0">""</span>
result_often <span style="color: #333333">=</span> <span style="background-color: #fff0f0">""</span>
power<span style="color: #333333">=</span> []
weighting <span style="color: #333333">=</span> [<span style="color: #0000DD; font-weight: bold">2</span>,<span style="color: #0000DD; font-weight: bold">8</span>,<span style="color: #0000DD; font-weight: bold">8</span>,<span style="color: #0000DD; font-weight: bold">16</span>,<span style="color: #0000DD; font-weight: bold">16</span>,<span style="color: #0000DD; font-weight: bold">32</span>,<span style="color: #0000DD; font-weight: bold">32</span>,<span style="color: #0000DD; font-weight: bold">64</span>]
music_frame <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">1</span>

<span style="color: #888888"># launch the music we will do the fft process</span>
wavfile <span style="color: #333333">=</span> wave<span style="color: #333333">.</span>open(<span style="background-color: #fff0f0">'/home/pi/project/abc.wav'</span>,<span style="background-color: #fff0f0">'r'</span>)
sample_rate <span style="color: #333333">=</span> wavfile<span style="color: #333333">.</span>getframerate()
no_channels <span style="color: #333333">=</span> wavfile<span style="color: #333333">.</span>getnchannels()
chunk <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">1024</span>

<span style="color: #888888"># output the music after the FFT</span>
output <span style="color: #333333">=</span> aa<span style="color: #333333">.</span>PCM(aa<span style="color: #333333">.</span>PCM_PLAYBACK,aa<span style="color: #333333">.</span>PCM_NORMAL)
output<span style="color: #333333">.</span>setchannels(no_channels)
output<span style="color: #333333">.</span>setrate(sample_rate)
output<span style="color: #333333">.</span>setformat(aa<span style="color: #333333">.</span>PCM_FORMAT_S16_LE)
output<span style="color: #333333">.</span>setperiodsize(chunk)


<span style="color: #008800; font-weight: bold">def</span> <span style="color: #0066BB; font-weight: bold">piff</span>(val):
    <span style="color: #008800; font-weight: bold">return</span> <span style="color: #007020">int</span>(<span style="color: #0000DD; font-weight: bold">2</span><span style="color: #333333">*</span>chunk<span style="color: #333333">*</span>val<span style="color: #333333">/</span>sample_rate)

<span style="color: #008800; font-weight: bold">def</span> <span style="color: #0066BB; font-weight: bold">calculate_levels</span>(data, chunk,sample_rate):
   <span style="color: #008800; font-weight: bold">global</span> matrix
   <span style="color: #008800; font-weight: bold">global</span> result
   <span style="color: #888888"># Convert raw data (ASCII string) to numpy array</span>
   data <span style="color: #333333">=</span> unpack(<span style="background-color: #fff0f0">"</span><span style="background-color: #eeeeee">%d</span><span style="background-color: #fff0f0">h"</span><span style="color: #333333">%</span>(<span style="color: #007020">len</span>(data)<span style="color: #333333">/</span><span style="color: #0000DD; font-weight: bold">2</span>),data)
   data <span style="color: #333333">=</span> np<span style="color: #333333">.</span>array(data, dtype<span style="color: #333333">=</span><span style="background-color: #fff0f0">'h'</span>)

   <span style="color: #888888"># Apply FFT - real data</span>
   fourier<span style="color: #333333">=</span>np<span style="color: #333333">.</span>fft<span style="color: #333333">.</span>rfft(data)
   <span style="color: #888888"># Remove last element in array to make it the same size as chunk</span>
   fourier<span style="color: #333333">=</span>np<span style="color: #333333">.</span>delete(fourier,<span style="color: #007020">len</span>(fourier)<span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">1</span>)
   <span style="color: #888888"># Find average 'amplitude' for specific frequency ranges in Hz</span>
   power <span style="color: #333333">=</span> np<span style="color: #333333">.</span>abs(fourier)   
   matrix[<span style="color: #0000DD; font-weight: bold">0</span>]<span style="color: #333333">=</span> <span style="color: #007020">int</span>(np<span style="color: #333333">.</span>mean(power[piff(<span style="color: #0000DD; font-weight: bold">0</span>)    :piff(<span style="color: #0000DD; font-weight: bold">156</span>):<span style="color: #0000DD; font-weight: bold">1</span>]))
   matrix[<span style="color: #0000DD; font-weight: bold">1</span>]<span style="color: #333333">=</span> <span style="color: #007020">int</span>(np<span style="color: #333333">.</span>mean(power[piff(<span style="color: #0000DD; font-weight: bold">156</span>)  :piff(<span style="color: #0000DD; font-weight: bold">313</span>):<span style="color: #0000DD; font-weight: bold">1</span>]))
   matrix[<span style="color: #0000DD; font-weight: bold">2</span>]<span style="color: #333333">=</span> <span style="color: #007020">int</span>(np<span style="color: #333333">.</span>mean(power[piff(<span style="color: #0000DD; font-weight: bold">313</span>)  :piff(<span style="color: #0000DD; font-weight: bold">625</span>):<span style="color: #0000DD; font-weight: bold">1</span>]))
   matrix[<span style="color: #0000DD; font-weight: bold">3</span>]<span style="color: #333333">=</span> <span style="color: #007020">int</span>(np<span style="color: #333333">.</span>mean(power[piff(<span style="color: #0000DD; font-weight: bold">625</span>)  :piff(<span style="color: #0000DD; font-weight: bold">1250</span>):<span style="color: #0000DD; font-weight: bold">1</span>]))
   matrix[<span style="color: #0000DD; font-weight: bold">4</span>]<span style="color: #333333">=</span> <span style="color: #007020">int</span>(np<span style="color: #333333">.</span>mean(power[piff(<span style="color: #0000DD; font-weight: bold">1250</span>) :piff(<span style="color: #0000DD; font-weight: bold">2500</span>):<span style="color: #0000DD; font-weight: bold">1</span>]))
   matrix[<span style="color: #0000DD; font-weight: bold">5</span>]<span style="color: #333333">=</span> <span style="color: #007020">int</span>(np<span style="color: #333333">.</span>mean(power[piff(<span style="color: #0000DD; font-weight: bold">2500</span>) :piff(<span style="color: #0000DD; font-weight: bold">5000</span>):<span style="color: #0000DD; font-weight: bold">1</span>]))
   matrix[<span style="color: #0000DD; font-weight: bold">6</span>]<span style="color: #333333">=</span> <span style="color: #007020">int</span>(np<span style="color: #333333">.</span>mean(power[piff(<span style="color: #0000DD; font-weight: bold">5000</span>) :piff(<span style="color: #0000DD; font-weight: bold">10000</span>):<span style="color: #0000DD; font-weight: bold">1</span>]))
   matrix[<span style="color: #0000DD; font-weight: bold">7</span>]<span style="color: #333333">=</span> <span style="color: #007020">int</span>(np<span style="color: #333333">.</span>mean(power[piff(<span style="color: #0000DD; font-weight: bold">10000</span>):piff(<span style="color: #0000DD; font-weight: bold">20000</span>):<span style="color: #0000DD; font-weight: bold">1</span>]))
   <span style="color: #008800; font-weight: bold">print</span> <span style="background-color: #fff0f0">"ori"</span>
   <span style="color: #008800; font-weight: bold">print</span> matrix
   <span style="color: #888888"># Tidy up column values for the LED matrix</span>
   matrix<span style="color: #333333">=</span>np<span style="color: #333333">.</span>divide(np<span style="color: #333333">.</span>multiply(matrix,weighting),<span style="color: #0000DD; font-weight: bold">1000000</span>)
   <span style="color: #008800; font-weight: bold">print</span> <span style="background-color: #fff0f0">"tidy up"</span>
   <span style="color: #008800; font-weight: bold">print</span> matrix
   
   <span style="color: #888888"># Set floor at 0 and ceiling at 8 for LED matrix</span>
  
   matrix<span style="color: #333333">=</span>matrix<span style="color: #333333">.</span>clip(<span style="color: #0000DD; font-weight: bold">1</span>,<span style="color: #0000DD; font-weight: bold">8</span>)
   <span style="color: #008800; font-weight: bold">print</span> <span style="background-color: #fff0f0">"floor"</span>
   <span style="color: #008800; font-weight: bold">print</span> matrix
   <span style="color: #008800; font-weight: bold">for</span> t <span style="color: #000000; font-weight: bold">in</span> <span style="color: #007020">range</span>(<span style="color: #0000DD; font-weight: bold">0</span>,<span style="color: #0000DD; font-weight: bold">7</span>):
       result <span style="color: #333333">=</span> result <span style="color: #333333">+</span> <span style="color: #007020">str</span>(matrix[t])
   <span style="color: #008800; font-weight: bold">return</span> result

<span style="color: #888888"># BLUETOOTH connection with socket library</span>
bd_addr <span style="color: #333333">=</span> <span style="background-color: #fff0f0">"98:D3:31:40:08:51"</span> <span style="color: #888888">#the address from the Arduino sensor</span>
port <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">1</span>
connected <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>
frame_rate <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">1</span>
rate <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">20</span>
frame <span style="color: #333333">=</span><span style="color: #0000DD; font-weight: bold">1</span>
sock <span style="color: #333333">=</span> socket<span style="color: #333333">.</span>socket (socket<span style="color: #333333">.</span>AF_BLUETOOTH,socket<span style="color: #333333">.</span>SOCK_STREAM, socket<span style="color: #333333">.</span>BTPROTO_RFCOMM)
sock<span style="color: #333333">.</span>connect((bd_addr,port))


<span style="color: #888888"># some bluetooth variables</span>
data <span style="color: #333333">=</span> <span style="background-color: #fff0f0">""</span>
data_result <span style="color: #333333">=</span><span style="background-color: #fff0f0">""</span>
rpm <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>
trash <span style="color: #333333">=</span> <span style="background-color: #fff0f0">""</span>

<span style="color: #888888"># set GPIO 4 to conntrol the motor</span>
GPIO<span style="color: #333333">.</span>setmode(GPIO<span style="color: #333333">.</span>BCM)
GPIO<span style="color: #333333">.</span>setup(<span style="color: #0000DD; font-weight: bold">4</span>, GPIO<span style="color: #333333">.</span>OUT, initial<span style="color: #333333">=</span>GPIO<span style="color: #333333">.</span>LOW)



 <span style="color: #888888"># readdata from bluetooth with blocking</span>
<span style="color: #008800; font-weight: bold">def</span> <span style="color: #0066BB; font-weight: bold">readdata</span>(length):
    length <span style="color: #333333">=</span> length <span style="color: #333333">+</span> <span style="color: #0000DD; font-weight: bold">1</span>
    <span style="color: #008800; font-weight: bold">global</span> data
    <span style="color: #008800; font-weight: bold">global</span> data_result
    data_len <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>
    temp <span style="color: #333333">=</span> <span style="background-color: #fff0f0">""</span>
  
    <span style="color: #008800; font-weight: bold">while</span> <span style="color: #000000; font-weight: bold">not</span> <span style="background-color: #fff0f0">'</span><span style="color: #666666; font-weight: bold; background-color: #fff0f0">\r</span><span style="background-color: #fff0f0">'</span> <span style="color: #000000; font-weight: bold">in</span> data:    <span style="color: #888888"># so there are still some data in the buffer</span>
        temp<span style="color: #333333">=</span> sock<span style="color: #333333">.</span>recv(<span style="color: #007020">max</span>(length<span style="color: #333333">-</span>data_len,<span style="color: #0000DD; font-weight: bold">1</span>))
        data<span style="color: #333333">=</span> data <span style="color: #333333">+</span> temp
        data_len<span style="color: #333333">=</span> data_len <span style="color: #333333">+</span> <span style="color: #007020">len</span>(temp)
    data_result <span style="color: #333333">=</span> data<span style="color: #333333">.</span>replace(<span style="background-color: #fff0f0">'</span><span style="color: #666666; font-weight: bold; background-color: #fff0f0">\r</span><span style="background-color: #fff0f0">'</span>, <span style="background-color: #fff0f0">''</span>)
    data_result <span style="color: #333333">=</span> data_result<span style="color: #333333">.</span>replace(<span style="background-color: #fff0f0">'</span><span style="color: #666666; font-weight: bold; background-color: #fff0f0">\n</span><span style="background-color: #fff0f0">'</span>, <span style="background-color: #fff0f0">''</span>)
    data <span style="color: #333333">=</span> <span style="background-color: #fff0f0">""</span>

<span style="color: #888888"># read data from bluetooth with non-blocking</span>
<span style="color: #008800; font-weight: bold">def</span> <span style="color: #0066BB; font-weight: bold">readdatanew</span>(length):
    sock<span style="color: #333333">.</span>settimeout(<span style="color: #0000DD; font-weight: bold">0</span>)
    <span style="color: #008800; font-weight: bold">try</span>:
        length <span style="color: #333333">=</span> length <span style="color: #333333">+</span> <span style="color: #0000DD; font-weight: bold">1</span>
        <span style="color: #008800; font-weight: bold">global</span> data
        <span style="color: #008800; font-weight: bold">global</span> data_result
        data_len <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>
        temp <span style="color: #333333">=</span> <span style="background-color: #fff0f0">""</span>
        temp<span style="color: #333333">=</span> sock<span style="color: #333333">.</span>recv(<span style="color: #007020">max</span>(length<span style="color: #333333">-</span>data_len,<span style="color: #0000DD; font-weight: bold">1</span>))
        data<span style="color: #333333">=</span> data <span style="color: #333333">+</span> temp
        data_len<span style="color: #333333">=</span> data_len <span style="color: #333333">+</span> <span style="color: #007020">len</span>(temp)
    
        <span style="color: #008800; font-weight: bold">while</span> <span style="color: #000000; font-weight: bold">not</span> <span style="background-color: #fff0f0">'</span><span style="color: #666666; font-weight: bold; background-color: #fff0f0">\r</span><span style="background-color: #fff0f0">'</span> <span style="color: #000000; font-weight: bold">in</span> data:    <span style="color: #888888"># so there are still some data in the buffer</span>
            temp<span style="color: #333333">=</span> sock<span style="color: #333333">.</span>recv(<span style="color: #007020">max</span>(length<span style="color: #333333">-</span>data_len,<span style="color: #0000DD; font-weight: bold">1</span>))
            data<span style="color: #333333">=</span> data <span style="color: #333333">+</span> temp
            data_len<span style="color: #333333">=</span> data_len <span style="color: #333333">+</span> <span style="color: #007020">len</span>(temp)
        data_result <span style="color: #333333">=</span> data<span style="color: #333333">.</span>replace(<span style="background-color: #fff0f0">'</span><span style="color: #666666; font-weight: bold; background-color: #fff0f0">\r</span><span style="background-color: #fff0f0">'</span>, <span style="background-color: #fff0f0">''</span>)
        data_result <span style="color: #333333">=</span> data_result<span style="color: #333333">.</span>replace(<span style="background-color: #fff0f0">'</span><span style="color: #666666; font-weight: bold; background-color: #fff0f0">\n</span><span style="background-color: #fff0f0">'</span>, <span style="background-color: #fff0f0">''</span>)
        data <span style="color: #333333">=</span> <span style="background-color: #fff0f0">""</span>
        sock<span style="color: #333333">.</span>settimeout(<span style="color: #007020">None</span>)
        <span style="color: #008800; font-weight: bold">return</span> data_result
    <span style="color: #008800; font-weight: bold">except</span>:
        sock<span style="color: #333333">.</span>settimeout(<span style="color: #007020">None</span>)

<span style="color: #888888"># empty the socket buffer       </span>

<span style="color: #008800; font-weight: bold">def</span> <span style="color: #0066BB; font-weight: bold">emptysocket</span>():
    sock<span style="color: #333333">.</span>settimeout(<span style="color: #0000DD; font-weight: bold">0</span>)
    <span style="color: #008800; font-weight: bold">try</span>:
        trash <span style="color: #333333">=</span> sock<span style="color: #333333">.</span>recv(<span style="color: #0000DD; font-weight: bold">1024</span>)
        <span style="color: #008800; font-weight: bold">print</span> <span style="background-color: #fff0f0">"trash is "</span>
        <span style="color: #008800; font-weight: bold">print</span> trash
        <span style="color: #008800; font-weight: bold">print</span> <span style="background-color: #fff0f0">"end"</span>
        sock<span style="color: #333333">.</span>settimeout(<span style="color: #007020">None</span>)
    <span style="color: #008800; font-weight: bold">except</span> :       
        <span style="color: #008800; font-weight: bold">print</span> <span style="background-color: #fff0f0">"no data in the buffer"</span>
        sock<span style="color: #333333">.</span>settimeout(<span style="color: #007020">None</span>)
        
<span style="color: #008800; font-weight: bold">try</span>:
    
    time<span style="color: #333333">.</span>sleep(<span style="color: #0000DD; font-weight: bold">3</span>)
    emptysocket()
    
<span style="color: #888888"># wake up arduino</span>
    time<span style="color: #333333">.</span>sleep(<span style="color: #0000DD; font-weight: bold">3</span>)
    sock<span style="color: #333333">.</span>send(<span style="background-color: #fff0f0">"1"</span>)
    <span style="color: #008800; font-weight: bold">print</span> <span style="background-color: #fff0f0">"finish"</span>

<span style="color: #888888"># receive the speed data from arduino if the test program is finished turn on the motor</span>
    readdata(<span style="color: #0000DD; font-weight: bold">5</span>)
    emptysocket()


    <span style="color: #008800; font-weight: bold">print</span> data_result
    <span style="color: #008800; font-weight: bold">if</span> data_result <span style="color: #333333">==</span> <span style="background-color: #fff0f0">'test1'</span>:
        GPIO<span style="color: #333333">.</span>output(<span style="color: #0000DD; font-weight: bold">4</span>,<span style="color: #007020">True</span>)


<span style="color: #888888"># receive the speed data from arduino if the speed is up to 25 which means the motor speed is relative stable</span>
<span style="color: #888888"># play the audio</span>

    readdata(<span style="color: #0000DD; font-weight: bold">6</span>)
    <span style="color: #008800; font-weight: bold">print</span> data_result

    <span style="color: #008800; font-weight: bold">if</span> data_result <span style="color: #333333">==</span> <span style="background-color: #fff0f0">"test2"</span>:   
        <span style="color: #008800; font-weight: bold">print</span> <span style="background-color: #fff0f0">"you are fast enough"</span>
        os<span style="color: #333333">.</span>system(<span style="background-color: #fff0f0">'omxplayer /home/pi/project/start.wav&amp;'</span>)        
    time<span style="color: #333333">.</span>sleep(<span style="color: #0000DD; font-weight: bold">10</span>)
    emptysocket()

<span style="color: #888888"># after 10s send the signal to arduino to change the string to display</span>
    sock<span style="color: #333333">.</span>send(<span style="background-color: #fff0f0">"2"</span>)
    os<span style="color: #333333">.</span>system(<span style="background-color: #fff0f0">'omxplayer /home/pi/project/start2.wav&amp;'</span>)
    time<span style="color: #333333">.</span>sleep(<span style="color: #0000DD; font-weight: bold">48</span>)

<span style="color: #888888"># receive the signal and </span>
    hour <span style="color: #333333">=</span> datetime<span style="color: #333333">.</span>datetime<span style="color: #333333">.</span>now()<span style="color: #333333">.</span>strftime(<span style="background-color: #fff0f0">"%H"</span>)
    miniute <span style="color: #333333">=</span> datetime<span style="color: #333333">.</span>datetime<span style="color: #333333">.</span>now()<span style="color: #333333">.</span>strftime(<span style="background-color: #fff0f0">"%M"</span>)
    second <span style="color: #333333">=</span> datetime<span style="color: #333333">.</span>datetime<span style="color: #333333">.</span>now()<span style="color: #333333">.</span>strftime(<span style="background-color: #fff0f0">"%S"</span>)
    sock<span style="color: #333333">.</span>send(<span style="background-color: #fff0f0">"3"</span> <span style="color: #333333">+</span> hour <span style="color: #333333">+</span> miniute <span style="color: #333333">+</span> second)
    second_history <span style="color: #333333">=</span> second
 
<span style="color: #888888"># Check the second. If the second changes, send a signal to arduino to update the time</span>
    <span style="color: #008800; font-weight: bold">while</span> <span style="color: #0000DD; font-weight: bold">1</span>:
            second <span style="color: #333333">=</span> datetime<span style="color: #333333">.</span>datetime<span style="color: #333333">.</span>now()<span style="color: #333333">.</span>strftime(<span style="background-color: #fff0f0">"%S"</span>)
            <span style="color: #008800; font-weight: bold">print</span> <span style="background-color: #fff0f0">"now"</span>
            <span style="color: #008800; font-weight: bold">print</span> second
            <span style="color: #008800; font-weight: bold">print</span> <span style="background-color: #fff0f0">"history"</span>
            <span style="color: #008800; font-weight: bold">print</span> second_history
            <span style="color: #008800; font-weight: bold">if</span> second_history <span style="color: #333333">!=</span> second:
                second_history <span style="color: #333333">=</span> second
                <span style="color: #008800; font-weight: bold">print</span> <span style="background-color: #fff0f0">"come in"</span>
                sock<span style="color: #333333">.</span>send(<span style="background-color: #fff0f0">"3"</span>)


<span style="color: #888888"># use control+c to switch to music mode</span>
<span style="color: #008800; font-weight: bold">except</span> <span style="color: #FF0000; font-weight: bold">KeyboardInterrupt</span>:
    <span style="color: #008800; font-weight: bold">print</span> <span style="background-color: #fff0f0">"clean"</span>
    emptysocket()
    <span style="color: #008800; font-weight: bold">try</span>:
      <span style="color: #888888"># read in the data</span>
        mdata <span style="color: #333333">=</span> wavfile<span style="color: #333333">.</span>readframes(chunk)
        os<span style="color: #333333">.</span>system(<span style="background-color: #fff0f0">'omxplayer /home/pi/project/abc.wav&amp;'</span>)
        <span style="color: #008800; font-weight: bold">while</span> mdata<span style="color: #333333">!=</span><span style="background-color: #fff0f0">''</span>:
      <span style="color: #888888"># play the music</span>
           output<span style="color: #333333">.</span>write(mdata)
           <span style="color: #008800; font-weight: bold">if</span> music_frame <span style="color: #333333">==</span><span style="color: #0000DD; font-weight: bold">1</span>:
      <span style="color: #888888"># process FFT on the data</span>
               result_often <span style="color: #333333">=</span> calculate_levels(mdata, chunk,sample_rate)
               <span style="color: #008800; font-weight: bold">print</span> result_often
               sock<span style="color: #333333">.</span>send(<span style="background-color: #fff0f0">"4"</span> <span style="color: #333333">+</span> <span style="background-color: #fff0f0">"11111111"</span> <span style="color: #333333">+</span> result_often)
               result <span style="color: #333333">=</span> <span style="background-color: #fff0f0">""</span>
               music_frame <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>
      <span style="color: #888888"># send new data to arduino if receive the signal</span>
           <span style="color: #008800; font-weight: bold">elif</span> (readdatanew(<span style="color: #0000DD; font-weight: bold">2</span>) <span style="color: #333333">==</span> <span style="background-color: #fff0f0">"go"</span>):
               result_often <span style="color: #333333">=</span> calculate_levels(mdata, chunk,sample_rate)
               <span style="color: #008800; font-weight: bold">print</span> result_often
               sock<span style="color: #333333">.</span>send(result_often)
               result <span style="color: #333333">=</span> <span style="background-color: #fff0f0">""</span>

           mdata <span style="color: #333333">=</span> wavfile<span style="color: #333333">.</span>readframes(chunk)
      <span style="color: #888888"># clean all the stuff     </span>
        <span style="color: #008800; font-weight: bold">print</span> <span style="background-color: #fff0f0">"clean"</span>
        emptysocket()
        GPIO<span style="color: #333333">.</span>output(<span style="color: #0000DD; font-weight: bold">4</span>,<span style="color: #007020">False</span>)
        GPIO<span style="color: #333333">.</span>cleanup()
        <span style="color: #007020">exit</span>(<span style="color: #0000DD; font-weight: bold">0</span>)
            
      <span style="color: #888888"># clean all the stuff     </span>
    <span style="color: #008800; font-weight: bold">except</span> <span style="color: #FF0000; font-weight: bold">KeyboardInterrupt</span>:
        <span style="color: #008800; font-weight: bold">print</span> <span style="background-color: #fff0f0">"clean"</span>
        emptysocket()
        GPIO<span style="color: #333333">.</span>output(<span style="color: #0000DD; font-weight: bold">4</span>,<span style="color: #007020">False</span>)
        GPIO<span style="color: #333333">.</span>cleanup()
        <span style="color: #007020">exit</span>(<span style="color: #0000DD; font-weight: bold">0</span>)
</pre></td>
                        </tr>
                    </tbody></table>
                </div>
            </div>
        </div>
    </div>
    <!-- /.container -->
    <br>
    <br>
    <br>
    <!-- Bootstrap core JavaScript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="./1The Infinity Mirror Music Player_files/jquery.min.js"></script>
    <script>
    window.jQuery || document.write('<script src="../../assets/js/vendor/jquery.min.js"><\/script>')
    </script>
    <script src="./1The Infinity Mirror Music Player_files/bootstrap.min.js"></script>
    <!-- IE10 viewport hack for Surface/desktop Windows 8 bug -->
    <!-- <script src="../../assets/js/ie10-viewport-bug-workaround.js"></script> -->


</body></html>